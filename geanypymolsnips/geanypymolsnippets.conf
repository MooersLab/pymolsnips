[PyMOL]
ao=set_color oxygen, [1.0,0.4,0.4];\nset_color nitrogen, [0.5,0.5,1.0];\nremove solvent;\nas spheres;\n# the 'as' command is a shortcut for show_as\nutil.cbaw;\n# 'cba' represents 'color by atom'. \n# The last letter represents the colore of the carbon atom.\nbg white;\n# bg is an alias for bg_color or background color.\nset light_count,10;\n# light_count is the number of light sources. \n# The max is 10. The defualt is 10.\nset spec_count,1;\n# Not documented on Wiki.\nset shininess, 10;\n# sets the shininess of the object.\nset specular,0.25;\n# Controls the amount of directly reflected light and not the shininess of the reflection.\nset ambient,0;\n# Controls the amount of ambient light. Default is 0. Ranges from -1 to 1.\nset direct,0;  \n# Not documented on Wiki.\nset reflect,1.5;\n# Controls the amount of light reflection and the effect that directional light has on shadows \n# and the general lighting of the scene. Default value is 0.5.\nset ray_shadow_decay_factor, 0.1;\nset ray_shadow_decay_range, 2;\nset depth_cue, 0;\nray;\n
sas=set surface_solvent, %cursor%
ellipcol=# set the colore of the thermal ellipsoids;\n# PyMOL colors: https://pymolwiki.org/index.php/Color_Values;\nset ellipsoid_color, %cursor%;
sigdist=set label_distance_digits, %cursor%;
sigang=set label_angle_digits, %cursor%;
bs=show sticks;\nset stick_radius, 0.12;\nset stick_ball, on;\nset stick_ball_ratio, 1.9;\nshow nb_spheres;\nset nb_spheres_size=0.33;
stack=delete all;\nfetch %cursor%, type=pdb,async=0;\nselect %cursor%) and chain B) );\nhide everything, element h; \nremove not %cursor%;\nbg_color white;\nshow sticks;\nset stick_radius=0.14;\nset stick_ball, on; \nset stick_ball_ratio,1.9;\nset_view (-0.75,0.09,0.66,-0.2,0.92,-0.35,-0.64,-0.39,-0.67,-0.0,-0.0,-43.7,7. 24,9.55,11.78,29.46,57.91,-20.0);\nhide everything, element H;\nselect carbon1, element C and (resi %cursor%); \n# select lower base pair;\nselect carbon2, element C and (resi %cursor%);\n#select upper base pair;\ncolor gray70,carbon1;\ncolor gray10,carbon2;\nspace cmyk;\ndistance hbond1,/%cursor%//A/G`2/O6;\ndistance hbond2,/%cursor%//A/G`2/N1;\ndistance hbond3,/%cursor%//B/G`8/O6;\ndistance hbond4,/%cursor%//B/G`8/N1;\ncolor black, hbond1;\ncolor black, hbond2;\ncolor gray70, hbond3;\ncolor gray70, hbond4;\nshow nb_spheres;\nset nb_spheres_size, 0.35;\nhide labels;\nray 1600,1000;\npng %cursor%.png\n
bu=# Edit the path to the file quat.py.;\n# You may have to download it from the PyMOL Wiki page.;\nrun ~/%cursor%/quat.py; quat;
doubleBond=set valence, 1; \nset valence_mode, 1;
cblind=# Edit the path to the Pymol-script-repo in your computer account.;\n# See PyMOL wiki for more information about the Pymol-script-reo.;\nrun ~/%cursor%/colorblindfriendly.py;\nas cartoon;\ncolor cb_red, ss H;\ncolor cb_yellow,ss S;\ncolor cb_green, ss L+;
centerpi=# Edit the atoms selected for positioning the pseudoatom.;\npseudoatom pi_cent,/%cursor%/cg+cz;\ndist pi_cent////ps1, b/%cursor%;
cribbon=as cartoon;\ncolor red, ss H;\ncolor yellow,ss S;\ncolor green, ss L+;
cspheres=as spheres;\ncolor gray30, chain %cursor%;\ncolor white, chain %cursor%;\ncolor green, name CL;\ncolor brown, resn NAG;\ncolor red, resi 381;\nremove solvent;\nset specular, 0;\nset ray_trace_gain, 0;\nset ray_trace_mode, 3;\nbg_color white;\nset ray_trace_color, black;\nset depth_cue,0;
coordinate=viewport 900,600;\nfetch 3nd4, type=pdb, async=0;\nrun ~/Scripts/PyMOLScripts/quat.py;\nquat 3nd4;\nshow sticks;\nset stick_radius=0.125;\nhide everything, name H*;\nbg_color white;\ncreate coorCov, (3nd4_1 and (resi 19 or resi 119 or resi 219 or resi 319 or resi 419 or resi 519 or (resi 3 and name N7)));\nbond (coorCov//A/NA`19/NA),(coorCov//A/A`3/N7);\nbond (coorCov//A/NA`19/NA),(coorCov//A/HOH`119/O);\nbond (coorCov//A/NA`19/NA),(coorCov//A/HOH`219/O);\nbond (coorCov//A/NA`19/NA),(coorCov//A/HOH`319/O);\nbond (coorCov//A/NA`19/NA),(coorCov//A/HOH`519/O);\ndistance (3nd4_1 and chain Aand resi 19 and name NA), (3nd4_1 and chain A and resi 519);\ndistance (3nd4_1 and chain A and resi 19 and name NA), (3nd4_1 and chain A and resi 419);\ndistance (3nd4_1 and chain A and resi 19 and name NA), (3nd4_1 and chain A and resi 319);\ndistance (3nd4_1 and chain A and resi 19 and name NA), (3nd4_1 and chain A and resi 219);\nshow nb_spheres; \nset nb_spheres_size, .35;\ndistance hbond1,/3nd4_1/1/A/HOH`119/O, /3nd4_1/1/A/A`3/OP2;\ndistance hbond2,/3nd4_1/1/A/HOH`319/O, /3nd4_1/1/A/A`3/OP2;\ndistance hbond3,/3nd4_1/1/A/HOH`91/O,/3nd4_1/1/A/HOH`119/O;\ndistance hbond4,/3nd4_1/1/A/G`4/N7,/3nd4_1/1/A/HOH`91/O;\ndistance hbond5,/3nd4_1/1/A/G`4/O6, /3nd4_1/1/A/HOH`419/O;\ndistance hbond6,/3nd4_1/1/A/HOH`91/O,/3nd4_1/1/A/G`4/OP2;\ndistance hbond7,/3nd4_1/1/A/HOH`319/O,/3nd4_1/1/A/G`2/OP2;\ndistance  hbond9,/3nd4_1/1/A/HOH`419/O,/3nd4_2/2/A/HOH`74/O;\ndistance hbond10,/3nd4_2/2/A/C`15/O2,/3nd4_1/1/A/G`2/N2;\ndistance hbond11, /3nd4_2/2/A/C`15/N3,/3nd4_1/1/A/G`2/N1;\ndistance hbond12,/3nd4_2/2/A/C`15/N4,/3nd4_1/1/A/G`2/O6;\ndistance hbond13, /3nd4_2/2/A/U`14/N3,/3nd4_1/1/A/A`3/N1;\ndistance hbond14,3nd4_2/2/A/U`14/O4,/3nd4_1/1/A/A`3/N6;\ndistance hbond15, /3nd4_2/2/A/C`13/N4,/3nd4_1/1/A/G`4/O6;\n distance hbond16,/3nd4_2/2/A/C`13/N3, /3nd4_1/1/A/G`4/N1;\ndistance hbond17, /3nd4_1/1/A/G`4/N2,/3nd4_2/2/A/C`13/O2;\ndistance hbond18,/3nd4_1/1/A/G`2/N2,/3nd4_2/2/A/C`15/O2;\ndistance hbond19,/3nd4_1/1/A/HOH`91/O,/3nd4_1/1/A/G`4/OP2;    \nset depth_cue=0;\nset ray_trace_fog=0;\nset dash_color, black;\nset label_font_id, 5;\nset label_size, 36;\nset label_position, (0.5, 1.0, 2.0);\nset label_color, black;\nset dash_gap, 0.2;\nset dash_width, 2.0;\nset dash_length, 0.2;\nset label_color, black;\nset dash_gap, 0.2;\nset dash_width, 2.0;\nset dash_length, 0.2;\nselect carbon, element C;\ncolor yellow, carbon;\ndisable carbon;\nset_view(-0.9,0.34,-0.26,0.33,0.18,-0.93,-0.27,-0.92,-0.28,-0.07,-0.23,-27.83,8.63,19.85,13.2,16.0,31.63,-20.0)
distance=# Edit the name for the ditance, the selection criteria for atom 1, and the selection criteria for atom 2.;\ndistance %cursor%;
drawHbonds=hide everything, hydrogens;\nhide labels;\n# set the color of the dashed lines representing the H-bond.;\nset dash_color, %cursor%;\nset dash_gap, 0.4;\nset dash_radius, 0.08;
carvedIsomesh=delete all;\n# Fetch the coordinates. Need internet connection.\nfetch %cursor%, async=0;\n# Fetch the electron density map.\nfetch %cursor%, type=2fofc,async=0;\n# create a selection out of the glycan\nselect %cursor%;\norient %cursor%;\nremove not %cursor%;\nremove name H*;\nisomesh 2fofcmap, %cursor%, carve = 1.8;\ncolor density, 2fofcmap; \nshow sticks;\nshow spheres;\nset stick_radius, .07;\nset sphere_scale, .19;\nset sphere_scale, .13, elem H;\nset bg_rgb=[1, 1, 1];\nset stick_quality, 50;\nset sphere_quality, 4;\ncolor gray85, elem C;\ncolor red, elem O;\ncolor slate, elem N;\ncolor gray98, elem H;\nset stick_color, gray50;\nset ray_trace_mode, 1;\nset ray_texture, 2;\nset antialias, 3;\nset ambient, 0.5;\nset spec_count, 5;\nset shininess, 50;\nset specular, 1;\nset reflect, .1;\nset dash_gap, 0;\nset dash_color, black;\nset dash_gap, .15;\nset dash_length, .05;\nset dash_round_ends, 0;\nset dash_radius, .05;\nset_view (0.34,-0.72,0.61,0.8,0.56,0.22,-0.51,0.4,0.77,0.0,0.0,-81.31,44.64,-9.02,58.62,65.34,97.28,-20.0);\npreset.ball_and_stick("all",mode=1);\ndraw;
fetch2FoFcIsomesh=# Fetch a 2fofc electron density map. Edit the PDB-ID code.;\nfetch %cursor%_2fofc, type=2fofc, async=0;\n# Render and display a contour of this map as chicken wire.;\nisomesh 2fofcmap, %cursor%, carve = 1.8;
fetchCIF=# Fetch the atomic coordinates as a cif file. Requires internet connection.\nfetch %cursor%, type=cif, async=0;
fetchFoFc=# fetch 2fofc map. The argument is its object name.;\nfetch %cursor%_2fofc, type=fofc, async=0;
filledRing=show sticks;set cartoon_ring_mode, 3;\nset cartoon_ring_finder, 1;\nset cartoon_ladder_mode, 1;\nset cartoon_nucleic_acid_mode, 4;\nset cartoon_ring_transparency, 0.5;\nas cartoon;
getCoordinates=print cmd.get_atom_coords('%cursor%');
hbonddash=hide everything, hydrogens;\nhide labels;\nset dash_color, black; \nset dash_gap, 0.4;\nset dash_radius, 0.08;
hidealtloc=select altconf, alt %cursor%  # select B alternative locators;\nhide everything, altconf  # hide alt B locators;
labelResnResi=label name ca, '%s%s' %(one_letter[%cursor%);
labelSS=alter %cursor%';\nlabel (%2),'%3';
loadPDBbs=fetch %cursor%, type=pdb, async=0;\nhide (name H*);\nhide lines;\nshow sticks;\nset stick_radius, %cursor%;\nset nb_sphere_radius, %cursor%;\norient;
loadPDBnb=fetch %cursor%, type=pdb, async=0;\norient;\nset stick_radius, %cursor%;\nhide (name H*);\nset nb_sphere_size, %cursor%;\nset nb_spheres_quality, %cursor%;\nshow nb_spheres;
ms=fetch %cursor%, type=pdb, async=0;\nselect %cursor%;\nrun %cursor%;\ncalc_msms_area %cursor%;
molscriptRibbon=set cartoon_highlight_color, grey;\nshow cartoon;\nset cartoon_flat_sheets, 0;\nset cartoon_smooth_loops, 0;\nset cartoon_fancy_helices, 1;
oneLetter=one_leVer%={'VAL':'V',%'ILE':'I',%'LEU':'L',%'GLU':'E',%'GLN':'Q','ASP':'D',%\n'ASN':'N',%'HIS':'H',%'TRP':'W',%'PHE':'F',%'TYR':'Y',%'ARG':'R',%'LYS':'K',%\n'SER':'S',%'THR':'T',%'MET':'M',%'ALA':'A',%'GLY':'G',%'PRO':'P',%'CYS':'C'}%
fasta=print cmd.get_fastastr("all")
pseudolabel=pseudoatom %cursor%;\nlabel %cursor%, '%0';\nset label_color, %cursor%;
rotate=rotate %cursor%;
stereoDraw=stereo walleye; \nset ray_shadow, off; \n#draw 3200,2000;\ndraw %cursor%; \npng %cursor%.png;
stereoRay=stereo; \nset ray_shadow, off;\nray %cursor%;\npng %cursor%.png;
loadThreeMaps=load %cursor%.pdb;\n# Make sure to rename map file so that;\n# the root filename differs from pdb root filename;\nload %cursor%_2fofc.ccp4, 2fofc;\nload %cursor%_fofc.ccp4, fofc;\nselect  %cursor%, resid 200 or (resid 469:477);\nisomesh %cursor%;\ncolor density, %cursor%;\nisomesh %cursor%;\ncolor green, %cursor%;\nisomesh %cursor%;\ncolor red, %cursor%;
turnAboutAxis=turn %cursor%;
volumeRamp=cmd.volume_ramp_new("ramp_magenta", [0.01, 1.00, 0.00, 1.00, 0.00, 4.01, 1.00, 0.00, 1.00, 0.10, 4.99, 1.00, 0.00, 1.00, 0.50,])
solventRadius=set solvent_radius, %cursor%;
scaleRadiusColor=# Use snippets scaleRadiusColorpy and scaleRadiusColorPythonInsertpy for python scripts;\nbg_color white;\nhide everything;\nshow spheres;\nset  stick_radius = 0.1;\nhide everything, HET;\nshow spheres, HET;\nset sphere_quality=3;\nshow sticks, resi %cursor%;\nfrom pymol import stored;\n# set the stored array equal to the b−values or use your own values; \nstored.bb = [ ];\niterate all, stored.bb.append(b);\n# execute a python−block;\npython;\n# scale the b−values;\nM = max(stored.bb);\nscaledBB = map(lambda x: float (x/M), stored.bb);\ncount = 0;\n# set the sphere radii independently;\n#[(cmd.set("sphere_scale", x ,"ID %s"%count); count = count + 1) for x in scaledBB];\nfor x in scaledBB:\n  cmd.set("sphere_scale", x ,"ID %s"%count)\n  count = count + 1\npython end;\nspectrum b, selection=%cursor%;\nspace cmyk;\nset specular_intensity , 0.25;
rv=run roundview.py;
spng=python;\nimport datetime;\nfrom pymol import cmd; \nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT); \ncmd.save(stemName+s+".png"); \npython end;
spse=python;\nimport datetime;\nfrom pymol import cmd; \nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT); \ncmd.save(stemName+s+".pse"); \npython end;
sc222=run $HOME/%cursor%supercell.py;\nsupercell 2, 2, 2, , %cursor%, 1;
pearl=create %cursor%;\nset sphere_transparency, 0.4, %cursor%;\nset sphere_scale, 1.05, %cursor%;\nray;
fog=set fog, 0;
rmwater=remove resn HOH;
setcolor=set_color %cursor%];\ncolor %cursor%;
duplicateObject=# Create an object with the first argument using the selection which is the second argument.;\ncreate %cursor%;
selectChain=select %cursor%;
selectResidues=select aromatic, resn phe+tyr+trp;
selectResi=select ${!:se}; resi %cursor%;
selectElement=select %cursor%;
selectName=select %cursor%;
selectHelices=select %cursor%, ss h; 
selectStrands=select %cursor%, ss s; 
selectLoops=select %cursor%, ss l;
selectAllBut=select %cursor%;
selectAtomsAround=select %cursor%;
selectResiduesAround=select %cursor%;
undoSelection=disable %cursor%; 
loadPDBfile=# Load into pymol a pdb file in the current directory.\nload %cursor%.pdb;
savePNG=# PyMOL writes out only png files. \n# This may need to be converted to tiff.\n# See the png2tiff snippet for a bash script that converts all png files in a folder into tiff files.\n# 1: png filename\n# 2: x-dimension in pixels\n# 3: y-dimension in pixels, 1600 x 1000 approximates the golden ratio. Usually want a square for multipanel figures.\n# 4: dots per inch, \n# 5: ray tracing off, 0; ray tracing on, 1\n# should also consider image without ray tracing shadows. \npng %cursor%;
ringMode=show cartoon, %cursor%;
sidehChainHelper=set cartoon_side_chain_helper, on;
extractPartObj=extract new_obj, chain A;
puttyCartoon=show cartoon;\ncartoon putty;\nset cartoon_smooth_loops, 0;\n# The command below may be needed if the above setting does not work.\n# This can happen if using the presets.\n# unset cartoon_smooth_loops; \nset cartoon_flat_sheets, 0;\n# The command below may be needed if the above setting does not work.\n# This can happen if using the presets.\n# unset cartoon_smooth_loops; \nset cartoon_smooth_loops,0;\n# The command below may be needed if the above setting does not work.\n# This can happen if using the presets.\n## unset cartoon_smooth_loops;\n
hideSelection=indicate none
discreteCartoonColoring=set cartoon_discrete_colors, on;
sc111=# 1: change to your path to supercell.py.\nrun $HOME/%cursor%supercell.py;\nsupercell 1, 1, 1, , %cursor%, 1;
saxsEnvelope=# 1: enter the name of the bead model object;\nalter %cursor%, vdw=3.0;\nset solvent_radius = 3.0;
setpath=os.environ["PATH"] += os.pathsep +%cursor%;
fetchPath=set fetch_path, %cursor%;
antialias=set antialias, 1;
lspymolrc=print invocation.options.deferred;
sigDigits=set label_distance_digits, %cursor%;\nset label_angle_digits, %cursor%;
labelCAs=label name CA,"%s%s" % (resn,resi);
labelWatersHOH=label resn HOH ,"%s%s" % (resn,resi);
labelWatersW=label resn HOH ,"W%s" % (resi);
findHbonds=remove element h; distance hbonds, all, all, 3.2, mode=2;
printBs=remove element h; iterate resi %cursor%, print(resi, name,b);
labelMainChain=label name n+c+o+ca,"%s%s%s" % (resn,resi,name);
printBspartB=iterate resi %cursor%, print resi, name, alt, b;
printBs2digits=iterate (resi %cursor%), print(name + " %.2f" % b);
writeCommandReference2HTML=cmd.write_html_ref('pymol-command-ref.html');
averageB=# Uses a regular list as opposed to PyMOL's stored list. Edit the selection as needed.;\nBfactors = []; \n#  >>> edit the selection below, which is a range of residue numbers here.;\niterate (resi %cursor%), Bfactors.append(b);\nprint("Sum = ", "%.2f" % (sum(Bfactors)));\nprint("Number of atoms = ", len(Bfactors));\nprint( 'Average B =' , "%.2f" % ( sum(Bfactors)/float(len(Bfactors))));
aveB4resiX=# AveBResiX, prints the resiude number and the average bfactor.;\n# Uses reduce and lambda, builtin Python functional porgramming functions.;\n# Note that you need to convert the length of the list of Bfactors from an integer to a float before division into the sum.; \nBfactors = [];\n# edit the selection below, which is a range of residue numbers here.;\niterate (resi %cursor%), Bfactors.append(b);\nprint( "Average B-factor of residue ", %{1:133} , "   = ", "%.2f" %(reduce(lambda x, y: x + y, Bfactors) / float(len(Bfactors))) );
printNameB4ResiX=Bfac_dict = { 'Bfactors3' : [] };cmd.iterate("(%cursor%)","Bfactors3.append((name, b))", space=Bfac_dict); for i,j in Bfac_dict['Bfactors3']: print("%s %.2f" % (i,j));
printResiResnNameB4ResiX=Bfac_dict = { 'Bfactors3' : [] };cmd.iterate("(%cursor%)","Bfactors3.append((resn,resi,name, b))", space=Bfac_dict); for i,j,k,l in Bfac_dict['Bfactors3']: print("%s %s %s %.2f" % (i,j,k,l));
printResiResnNameB4ResiXNoH=Bfac_dict = { 'Bfactors3' : [] };cmd.iterate("(%cursor% and not elem H)","Bfactors3.append((resn,resi,name, b))", space=Bfac_dict); for i,j,k,l in Bfac_dict['Bfactors3']: print("%s %s %s %.2f" % (i,j,k,l));
internalGUImode2=internal_gui_mode=2;
internalGUIwidth=# set to 0 to make the internal gui vanish;\nset internal_gui_width=%cursor%;
printDoc=print %cursor%.__doc__;
lsSnips="""Tab trigger                  Description\n---------------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------\nantialias                    Set antialias to get smooth edges\nao                           Ambient occlussion.\naveB4resiX                   AveBResiX, prints the resiude number and the average bfactor.\n                             Uses reduce and lambda, builtin Python functional porgramming functions.\n                             Note that you need to convert the length of the list of Bfactors from an integer to a float before division into the sum.\naverageB                     Uses a regular list as opposed to PyMOL's stored list. Edit the selection as needed.\nbs                           Ball and stick representation.\nbu                           Biological unit.\ncarvedDensity                Carved electron density.\ncblind                       Color blindness.\ncenterpi                     Center pi.\ncoordinate                   Coordinate covalent bonds to metals and H-bonds friom RNA.\ncribbon                      Color ribbon H red, strand yellow, loop green.\ncspheres                     Colored spheres.\ndiscreteCartoonColoring      Turn on discrete colors between secondary structure elements.\ndistance                     H-bond distances.\ndoubleBond                   Valence bond.\ndrawHbonds                   Draw H-bonds.\nduplicateObject              Duplicate object.\nellipcol                     Set ellipsoid color.\nextractPartObj               Create a new object from part of an existing object.\nfasta                        Print Fasta from PDB file.\nfetch2FoFc                   Fetch 2FoFc map.\nfetchCIF                     Fetch cif file.\nfetchFoFc                    Fetch fofc map.\nfetchPath                    Set path for location to save fetched pdb files.\nfilledRing                   Filled rings in nucleic acids.\nfindHbonds                   Find hbonds around a residue.\nfog                          Blur the background atoms.\ngetCoordinates               Get coordinates.\nhbond                        Hbond setup.\nhbonddash                    H-bond dashes.\nhideSelection                Trun off magenta squares on current selection.\nhidealtloc                   Hide alt loc.\ninternalGUImode2             Makes the background of the internal gui transparent with the viewport extended into this region of the gui. This may be a useful mode for workshops.\ninternalGUIwidth             Set the width of the internal gui.\nlabelCAs                     Label the CA atoms with the Ala333 style format\nlabelMainChain               Label the main chain atoms by resn,resi,atom name.\nlabelResnResi                Label CA atom with residue name and residue number.\nlabelSS                      Label SS.\nlabelWatersHOH               Label waters HOH.\nlabelWatersW                 Label waters W.\nloadPDBbs                    Load PDB ball-and-stick.\nloadPDBfile                  Load a pdb file in the current directory.\nloadPDBnb                    Load PDB nb spheres.\nlsSnips                      List all snips by tab trigger and description\nlspymolrc                    Print list of active pymolrc files.\nmolscriptRibbon              Molscript ribbons.\nms                           Measure surface area.\noneLetter                    One letter amino acid.\npearl                        The pearl effect is made with two spheres with the outer sphere being transparent.\nprintBs                      Print the B-factors of a residue.\nprintBs2digits               Print B-values for a residue with the B's rounded off to two decimal places.\nprintBspartB                 Print B factors of part B of a rsidues.\nprintDoc                     Print document string of a function.\nprintNameB4ResiX             Print name and b-factor for a rsidue. You can change this to a named selection or a residue range ( e.g., resi 133:155). Use the noH variant if H atoms are present.\nprintResiResnNameB4ResiX     Print resn, resi, atom name, and b-factor.\nprintResiResnNameB4ResiXNoH  Print name and b-factor for a rsidue. You can change this to a named selection or a residue range ( e.g., resi 133:155). The noH variant.\npseudolabel                  Position label with pseudoatom.\nputtyCartoon                 Create a putty cartoon.\nringMode                     Set the ring mode to a value between 0  and 6 in cartoons of nucleic acids.\nrmwater                      Remove waters from molecular object.\nrotate                       Rotate about axis.\nrv                           Return settings in rounded format.\nsavePNG                      Save a png file of current scene to the current directory.\nsaxsEnvelope                 Display SAXS envelope\nsc111                        Display all symmetry mates in one unit cell. Asumes supercell.py (sse PyMOL Wiki) is in $HOME/Scripts/PyMOLscripts/.\nsc222                        Run Tom Holder's supercell script to generate three cells in all directions.\nscaleRadiusColor             Scale the radius and color of atoms as spheres by property in the B-value column.\nselectAllBut                 Select all nitrogen atom in a selelction except from lysine.\nselectAtomsAround            Select atoms within a radius around a ligand.\nselectChain                  Select a chain.\nselectElement                Select atoms by elemnt.\nselectHelices                Select atoms by alpha helices.\nselectLoops                  Select atoms by beta loops.\nselectName                   Select atoms by name.\nselectResi                   Select residues by a range of numbers.\nselectResidues               Select residues by name.\nselectResiduesAround         Select residues within a radius around a ligand.\nselectStrands                Select atoms by beta strands.\nsetcolor                     Set color name to a RGB code.\nsetpath                      Set additional path for PyMOL to search on startup\nsidehChainHelper             In cartoons, hide the backbone atoms of selected residues when showing then as sticks.\nsigDigits                    Set number of decimals places to show in distance labels.\nsigang                       Set angle labels to display 2 decimals places\nsigdist                      set distance labels to display 2 decimals\nsolventRadius                Set radius of ball used to make solvent accessible surface.\nspng                         Save png flle with timestamp\nspse                         Save pse flle with timestamp\nstack                        Base-stacking figure.\nstereoDraw                   Stereo draw.\nstereoRay                    Stereo ray.\nthreeMaps                    Three electron density.\nturnAboutAxis                Turn about axis.\nundoSelection                Undo a selection.\nvolumeRamp                   Volume ramp.\nwriteCommandReference2HTML   Write the command reference to html file in the present working directory."""\n
his31asp70=fetch %cursor%, async=0; \nzoom (%cursor%); \npreset.technical(selection='all'); \nbg_color %cursor%; \nclip slab, 7,(%cursor%);\nrock;
waterTriple=fetch %cursor%, async=0; \n# zoom in on the selection. Edit by chaning the residue number.\nzoom resi %cursor%; \npreset.technical(selection='all', mode=1);
ligandSelect=select %cursor%, organic;
github=https://github.com/MooersLab/pymolsnips/blob/master/README.md
sigdihedral=set label_dihedral_digits, %cursor%;
stateOne=cmd.create('newobject', 'oldobject', '1', '1');
sc112=run $HOME/%cursor%supercell.py;\nsupercell 1, 1, 2, ,  %cursor%, 1;
sc113=run $HOME/%cursor%supercell.py;\nsupercell 1, 1, 3, ,  %cursor%, 1;
sc311=run $HOME/%cursor%supercell.py;\nsupercell 3, 1, 1, ,  %cursor%, 1;
sc131=run $HOME/%cursor%supercell.py;\nsupercell 1, 3, 1, , %cursor%, 1;
sc211=run $HOME/%cursor%supercell.py;\nsupercell 2, 1, 1, , %cursor%, 1;
sc121=run $HOME/%cursor%supercell.py;\nsupercell 1, 2, 1, ,  %cursor%, 1;
sc122=run $HOME/%cursor%supercell.py;\nsupercell 1, 2, 2, , %cursor%, 1;
sc221=run $HOME/%cursor%supercell.py;\nsupercell 2, 2, 1, ,  %cursor%, 1;
sc212=run $HOME/%cursor%supercell.py;\nsupercell 2, 1, 2, , %cursor%, 1;
sc133=run $HOME/%cursor%supercell.py;\nsupercell 1, 3, 3, , %cursor%, 1;
sc313=run $HOME/%cursor%supercell.py;\nsupercell 3, 1, 3, , %cursor%, 1;
sc331=run $HOME/%cursor%supercell.py;\nsupercell 3, 3, 1, ,  %cursor%, 1;
sc233=run $HOME/%cursor%supercell.py;\nsupercell 2, 3, 3, ,  %cursor%, 1;
sc323=run $HOME/%cursor%supercell.py;\nsupercell 1, 1, 1, , %cursor%, 1;
sc332=run $HOME/%cursor%supercell.py;\nsupercell 3, 3, 2, ,  %cursor%, 1;
sc333=run $HOME/%cursor%supercell.py;\nsupercell 3, 3, 3, , %cursor%, 1;
sc114=run $HOME/%cursor%supercell.py;\nsupercell 1, 1, 4, ,  %cursor%, 1;\n
sc141=run $HOME/%cursor%supercell.py;\nsupercell 1, 4, 1, ,  %cursor%, 1;
sc411=run $HOME/%cursor%supercell.py;\nsupercell 4, 1, 1, ,  %cursor%, 1;
saln=python;\nimport datetime;\nfrom pymol import cmd;\nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT);\ncmd.save(stemName+s+".aln");\npython end;
sccp4=python;\nimport datetime;\nfrom pymol import cmd; \nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT); \ncmd.save(stemName+s+".ccp4"); \npython end;
sdae=import datetime;\nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT); \ncmd.save(stemName+s+".dae"); \n
carvedIsosurface=delete all;\n# Fetch the coordinates. Need internet connection.;\nfetch %cursor%, async=0;\n# Fetch the electron density map.;\nfetch %cursor%, type=2fofc,async=0;\n# create a selection out of the glycan;\nselect %cursor%;\norient %cursor%;\nremove not %cursor%;\nremove name H*;\nisosurface 2fofcmap, %cursor%, carve = 1.8;\ncolor density, 2fofcmap; \nshow sticks;\nshow spheres;\nset stick_radius, .07;\nset sphere_scale, .19;\nset sphere_scale, .13, elem H;\nset bg_rgb=[1, 1, 1];\nset stick_quality, 50;\nset sphere_quality, 4;\ncolor gray85, elem C;\ncolor red, elem O;\ncolor slate, elem N;\ncolor gray98, elem H;\nset stick_color, gray50;\nset ray_trace_mode, 1;\nset ray_texture, 2;\nset antialias, 3;\nset ambient, 0.5;\nset spec_count, 5;\nset shininess, 50;\nset specular, 1;\nset reflect, .1;\nset dash_gap, 0;\nset dash_color, black;\nset dash_gap, .15;\nset dash_length, .05;\nset dash_round_ends, 0;\nset dash_radius, .05;\nset_view (0.34,-0.72,0.61,0.8,0.56,0.22,-0.51,0.4,0.77,0.0,0.0,-81.31,44.64,-9.02,58.62,65.34,97.28,-20.0);\npreset.ball_and_stick("all",mode=1);\ndraw;
fetch2FoFcIsosurface=# Fetch a 2fofc electron density map. Edit the PDB-ID code. Use lowercase letter to select a single chain.;\nfetch %cursor%_2fofc, type=2fofc, async=0;\n# Render and display a contour of this map as a chicken wire representation.;\nisosurface 2fofcmap, %cursor%, carve = 1.8;
threeMapsIsosurface=load %cursor%.pdb;\n# Make sure to rename map file so that ;\n# the root filename differs from pdb root filename;\nload %cursor%_2fofc.ccp4, 2fofc;\nload %cursor%_fofc.ccp4, fofc;\nselect  %cursor%;\nisosurface %cursor%;\ncolor density, %cursor%;\nisosurface  %cursor%;\ncolor green, %cursor%;\nisosurface  %cursor%;\ncolor red, %cursor%;
carvedVolume=delete all;\n# Fetch the coordinates. Need internet connection.;\nfetch %cursor%, async=0;\n# Fetch the electron density map.;\nfetch %cursor%, type=2fofc,async=0;\n# create a selection out of the glycan;\nselect %cursor%;\n# oreint the long axes of the object along the x-axis;\norient %cursor%;\n# remove everything except the glycan;\nremove not %cursor%;\n# remove the remaining hydrogen atoms;\nremove name H*;\n# show the electron density map as a surface.\nsurface 2fofcmap, %cursor%, carve = 1.8;\ncolor density, 2fofcmap; \nshow sticks;\nshow spheres;\nset stick_radius, .07;\nset sphere_scale, .19;\nset sphere_scale, .13, elem H;\nset bg_rgb=[1, 1, 1];\nset stick_quality, 50;\n# make the spheres smooth with larger settings.;\nset sphere_quality, 4;\n# gray85 is off-white, gray0 is black;\ncolor gray85, elem C;\ncolor red, elem O;\ncolor slate, elem N;\ncolor gray98, elem H;\nset stick_color, gray50;\nset ray_trace_mode, 1;\nset ray_texture, 2;\nset antialias, 3;\nset ambient, 0.5;\nset spec_count, 5;\nset shininess, 50;\nset specular, 1;\nset reflect, .1;\nset dash_gap, 0;\nset dash_color, black;\nset dash_gap, .15;\nset dash_length, .05;\nset dash_round_ends, 0;\nset dash_radius, .05;\nset_view (0.34,-0.72,0.61,0.8,0.56,0.22,-0.51,0.4,0.77,0.0,0.0,-81.31,44.64,-9.02,58.62,65.34,97.28,-20.0);\npreset.ball_and_stick("all",mode=1);\ndraw;
fetch2FoFcVolume=fetch %cursor%, type=cif, async=0;\nfetch %cursor%_2fofc, type=2fofc, async=0;\n# Render and display a contour of this map as a volume around a selection called LongGlycan.;\nvolume 2fofcmap, %cursor%, carve = 1.8;
threeMapsVolume=load %cursor%.pdb;\n# Make sure to rename map file so that ;\n# the root filename differs from pdb root filename;\nload %cursor%_2fofc.ccp4, 2fofc;\nload %cursor%_fofc.ccp4, fofc;\nselect  %cursor%;\nvolume %cursor%;\ncolor density, %cursor%;\nvolume %cursor%;\ncolor green, %cursor%;\nvolume %cursor%;\ncolor red, %cursor%;
rvi=def rvj(StoredView=0, decimal_places=2, outname="roundedview.txt"):\n    """\n    rvj() is a modification of the the rv() function (aka the roundview.py) \n    so that it can run in Jupyter notebooks with the ipymol.viewer. \n    A set_view string is printed to the noteobook in a format that is ready \n    for reuse. \n    \n    The ipymol module was developed by Carlos Hernandez:\n    \n    https://github.com/cxhernandez/ipymol\n    \n    The pre-requisites for installing ipymol are as follows:\n    \n    1. Make a jupyter notebook kernel for Python interpreter inside of \n       the Schrodinger PyMOL. See the PyMOL Snippets GitHub Page for \n       a description of how to make one.\n    2. Install the following build of ipymol at the PyMOL prompt.\n       You need to log into your GitHub account first.\n    \n    pip install git+pip install git+https://github.com/cxhernandez/ipymol.git@2a30d6ec1588434e6f0f72a1d572444f89ff535b\n    \n    3. Make a bash alias to this PyMOL app file.\n    \n    4. Launch the jupyter notebook and select the pymol.python kernel.\n    \n    5. Open a terminal instance from the File pulldown in jupyter notebook.\n    \n    6. Enter `pymol -Rq` to launch an interactive instance of PyMOL.\n    \n    7. Enter the following code to load ipymol and conmect to PyMOL\n    \n    from ipymol import viewer as ipv\n    ipv.start()   # Start PyMOL RPC server\n    \n    Now you can change the scene manually and send the display as static \n    image to a cell in the jupyter notebook.\n    \n    It is assumed that the viewer class of the ipymol moduel has been \n    imported as ipv. \n    \n    I made the following modifications of roundview.py.\n    The cmd.get_view was replaced with ipv.get_view.\n    The cmd.extend was replaced with ipv.extend.\n    The myRoundedList was returned for further processing.\n    \n    MIT License\n    \n    Copyright:\n    Blaine Mooers and the OU Board of Regents\n    Uniersity of Oklahoma Health Sciences Center\n    Oklahoma City, OK 73104\n    \n    29 April 2020\n    \n    """\n    \n \n    StoredView = int(StoredView)\n    decimal_places = int(decimal_places)\n \n    #call the get_view function\n \n    m = ipv.get_view(StoredView)\n \n \n    #Make a list of the elements in the orientation matrix.\n \n    myList = [m[0], m[1], m[2], m[3], m[4], m[5], m[6],m[7], m[8], m[9],\n              m[10], m[11], m[12], m[13], m[14],m[15], m[16], m[17]]\n \n    #Round off the matrix elements to two decimal places (two fractional places)\n    #This rounding approach solved the problem of unwanted\n    #whitespaces when I tried to use a string format statement\n \n    myRoundedList = [round(elem, decimal_places) for elem in myList]\n    \n    #x is the string template for the output. The whitespace is required\n    #between the "set_view" and "("\n \n    x = 'set_view ({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17});'\n \n    # Print to the command history window.\n    print(x.format(*myRoundedList))\n \n    #Write to a text file.\n    myFile = open("roundedview.txt", "a")\n    myFile.write(x.format(*myRoundedList) + "")\n    myFile.close()\n    return myRoundedList\nipv.extend("rv", rv)
rdkrpcChem=import os;\nimport rdkit;\nfrom rdkit import Chem;\nfrom rdkit.Chem import AllChem;\nfrom rdkit.Chem import PyMol;\n\ns = PyMOL.MolViewer();\nmol = Chem.MolFromSmiles('%cursor%');\nmol = AllChem.AddHs(mol);\nAllChem.EmbedMolecule(mol);\nAllChem.MMFFOptimizeMolecule(mol);\ns.ShowMol(mol, name = '%cursor%', showOnly = False);\ns.Zoom('%cursor%');\ns.SetDisplayStyle('%cursor%', 'sticks');\ns.GetPNG(preDelay=5);
kernel=framerule=2pt,\nframesep=2mm,\nframesep=2mm,\nbreaklines=True,\nbaselinestretch=1.2\n]{bash}\n{\n "argv": [\n  "/Applications/PyMOL.app/Contents/bin/python",\n  "-m",\n  "ipykernel_launcher",\n  "-f",\n  "{connection_file}"\n ],\n "display_name": "pymol.python",\n "language": "python"\n}
rdkrpcProtein=from rdkit.Chem import PyMol;\n\nUsage=""""Start pymol from command line with -R flag.\nSelect the pymol.python kernel in Jupyter notebook. """;\n\ns = PyMol.MolViewer();\ndu = s.server.do;\ndu('rein; bg_color white; fetch %cursor%);');\ns.GetPNG(preDelay=3);\ndu('png %cursor%.png, dpi=600');
ipymolStart=# Start pymol in terminal with pymol -R;\n# Select pymol.python as kernel in juptyer;\nfrom ipymol import viewer as ipv;\nipv.start() # Start PyMOL RPC server;\n
ipymolProtein=# Create a kernel for PyMOL's python interpreter inside Jupyter;\n# See the kernel snippet for an example.;\n# See the README.md file on pymolsnips GItHub website;\n# https://github.com/MooersLab/pymilsnips;\n# for more details.;\n# Start pymol in terminal with pymol -R;\n# Select pymol.python as kernel in juptyer;\nfrom ipymol import viewer as ipv;\n# Start PyMOL RPC server;\nipv.start(); \nipv.do('fetch %cursor%');\nipv.do('rv');\n# The double parentheses are required when set_view is run this way.;\nipv.set_view((-0.13,-0.4,-0.91,0.89,-0.45,0.07,-0.44,-0.8,0.41,0.0,0.0,-182.47,35.13,11.48,9.72,149.64,215.3,-20.0));\nipv.do('AOD');\nipv.png('%cursor%.png');
rvr=def rvr(StoredView=0, decimal_places=2, outname="roundedview.txt"):\n   """MIT License\n    Copyright:\n    Blaine Mooers and the OU Board of Regents\n    University of Oklahoma Health Sciences Center\n    Oklahoma City, OK 73104\n    30 April 2020\n    \n    First run the following:\n    \n    from rdkit.Chem import PyMol\n    s = PyMol.MolViewer()\n    du = s.server.do\n\n    """\n    StoredView = int(StoredView) decimal_places = int(decimal_places)\n    #call the get_view function\n    m = s.get_view(StoredView)\n    #Make a list of the elements in the orientation matrix.\n    myList = [m[0], m[1], m[2], m[3], m[4], m[5], m[6],m[7], m[8], m[9], \n              m[10], m[11], m[12], m[13], m[14],m[15], m[16], m[17]]\n    #Round off the matrix elements to two decimal places (two fractional places)\n    #This rounding approach solved the problem of unwanted\n    #whitespaces when I tried to use a string format statement\n    myRoundedList = [round(elem, decimal_places) for elem in myList]\n    #x is the string template for the output. The whitespace is required\n    #between the "set_view" and "("\n    x = 'set_view ({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17});'\n    # Print to the command history window.\n    print(x.format(*myRoundedList))\n    #Write to a text file.\n    myFile = open("roundedview.txt", "a") myFile.write(x.format(*myRoundedList) + "") myFile.close()\n    return myRoundedList\ndu.extend("rvr", rvr)\n
cmddocs=[help(i) for i in dir(cmd)];
pymoldocs=[help(i) for i in dir(pymol)];
numResiProtein=sel = 'polymer.protein'; print(len(set([(i.chain, i.resi, i.resn) for i in cmd.get_model(sel).atom])));
numResiProteinChainA=sel = '%cursor% and polymer.protein'; print(len(set([(i.chain, i.resi, i.resn) for i in cmd.get_model(sel).atom])));
numResiNucleic=sel = 'polymer.nucleic'; print(len(set([(i.resi, i.resn) for i in cmd.get_model(sel).atom])));
numResiNucleicChainA=sel = '%cursor% and polymer.nucleic'; print(len(set([(i.resi, i.resn) for i in cmd.get_model(sel).atom])));
brokenNucleicBackbone=#  >>> edit the selections below, which are ranges of residue numbers and edit the molecular object name (5fur).;\n[cmd.bond(f"/%cursor%)]; \n[cmd.bond(f"/%cursor%)];
oneBondThicknessColor=# To change stick color and radius for the bond between atom 2 and 3;\nset_bond stick_color, %cursor%, index 2, index 3;\nset_bond stick_radius, %cursor%, index 2, index 3;
drawLinks=# Requires draw_links.py http://pldserver1.biochem.queensu.ca/~rlc/work/pymol/draw_links.py by Robert Campbell;\n# To connect the alpha carbons of residue 1 with 10, 6 with 16, 7  with 17 and 8 with 18.;\ndraw_links %cursor%;
printPath=# Print the path to the current used PyMOL binary.\nprint pymol.__path__
setLigandValenceOn=#Set on the valence of the ligand only;\nset valence, on, resn %cursor%;
presetDocs=help(preset)
helpDocs=help(help)
loadAmberTrajs=load %cursor%;\nload %cursor%;
saveSeppy=from pymol import cmd\nimport glob\nimport re\n\ndef saveSep(prefix=''):\n  """\n  save_sep <prefix>\n\n  saves multiple objects into multiple files using an optional prefix name.\n\n  e.g. save_sep prefix\n  """\n  obj_list = cmd.get_names("all")\n\n  if obj_list:\n    for i in range(len(obj_list)):\n      obj_name = "%s%s.pdb" % (prefix, obj_list[i])\n      cmd.save(obj_name, obj_list[i])\n      print("Saving %s" %  obj_name)\n  else:\n    print("No objects found")\n    \ncmd.extend('saveSep',saveSep)
optAlignRNA=#!python\n \n##############################################################################\n#\n# @SUMMARY: -- QKabsch.py.  A python implementation of the optimal superposition\n#     of two sets of vectors as proposed by Kabsch 1976 & 1978.\n#\n# @AUTHOR: Jason Vertrees\n# @COPYRIGHT: Jason Vertrees (C), 2005-2007\n# @LICENSE: Released under GPL:\n# This program is free software; you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation; either version 2 of the License, or\n#    (at your option) any later version.\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along with\n# this program; if not, write to the Free Software Foundation, Inc., 51 Franklin\n# Street, Fifth Floor, Boston, MA 02110-1301, USA \n#\n# DATE  : 2007-01-01\n# REV   : 2\n# REQUIREMENTS: numpy\n#\n#\n# Modified optAlign.py to use C1' carbon atoms of RNA for alignment.\n# Jan. 29, 2020 \n# Blaine Mooers, PhD\n# Univ. of Oklahoma Health Sciences Center\n#\n#############################################################################\nfrom array import *\n \n# system stuff\nimport os\nimport copy\n \n# pretty printing\nimport pprint\n \n# for importing as a plugin into PyMol\nfrom pymol import cmd\nfrom pymol import stored\nfrom pymol import selector\n \n# using numpy for linear algebra\nimport numpy\n \ndef optAlignRNA( sel1, sel2 ):\n	"""\n	optAlignRNA performs the Kabsch alignment algorithm upon the C1' carbons of two selections.\n	Example: optAlignRNA 1JU7 and i. 1-16 and n. C1', 1CLL and i. 4-146 and n. C1'\n \n	Two RMSDs are returned.  One comes from the Kabsch algorithm and the other from\n	PyMOL based upon your selections.\n	\n	This function can be run in a for loop to fit multiple structures  with a common prefix name:\n	\n	for x in cmd.get_names(): optAlignRNA(x, "1JU7_0001")\n	 \n	or get the rmsds for all combinations, do the following:\n	 \n	[[optAlignRNA(x, y) for x in cmd.get_names()] for y in cmd.get_names()]\n\n	"""\n	cmd.reset()\n \n	# make the lists for holding coordinates\n	# partial lists\n	stored.sel1 = []\n	stored.sel2 = []\n	# full lists\n	stored.mol1 = []\n	stored.mol2 = []\n \n	# -- CUT HERE\n	sel1 += " and N. C1'"\n	sel2 += " and N. C1'"\n	# -- CUT HERE\n \n	# Get the selected coordinates.  We\n	# align these coords.\n	cmd.iterate_state(1, selector.process(sel1), "stored.sel1.append([x,y,z])")\n	cmd.iterate_state(1, selector.process(sel2), "stored.sel2.append([x,y,z])")\n \n	# get molecule name\n	mol1 = cmd.identify(sel1,1)[0][0]\n	mol2 = cmd.identify(sel2,1)[0][0]\n \n	# Get all molecule coords.  We do this because\n	# we have to rotate the whole molcule, not just\n	# the aligned selection\n	cmd.iterate_state(1, mol1, "stored.mol1.append([x,y,z])")\n	cmd.iterate_state(1, mol2, "stored.mol2.append([x,y,z])")\n \n	# check for consistency\n	assert len(stored.sel1) == len(stored.sel2)\n	L = len(stored.sel1)\n	assert L > 0\n \n	# must alway center the two proteins to avoid\n	# affine transformations.  Center the two proteins\n	# to their selections.\n	COM1 = numpy.sum(stored.sel1,axis=0) / float(L)\n	COM2 = numpy.sum(stored.sel2,axis=0) / float(L)\n	stored.sel1 -= COM1\n	stored.sel2 -= COM2\n \n	# Initial residual, see Kabsch.\n	E0 = numpy.sum( numpy.sum(stored.sel1 * stored.sel1,axis=0),axis=0) + numpy.sum( numpy.sum(stored.sel2 * stored.sel2,axis=0),axis=0)\n \n	#\n	# This beautiful step provides the answer.  V and Wt are the orthonormal\n	# bases that when multiplied by each other give us the rotation matrix, U.\n	# S, (Sigma, from SVD) provides us with the error!  Isn't SVD great!\n	V, S, Wt = numpy.linalg.svd( numpy.dot( numpy.transpose(stored.sel2), stored.sel1))\n \n	# we already have our solution, in the results from SVD.\n	# we just need to check for reflections and then produce\n	# the rotation.  V and Wt are orthonormal, so their det's\n	# are +/-1.\n	reflect = float(str(float(numpy.linalg.det(V) * numpy.linalg.det(Wt))))\n \n	if reflect == -1.0:\n		S[-1] = -S[-1]\n		V[:,-1] = -V[:,-1]\n \n	RMSD = E0 - (2.0 * sum(S))\n	RMSD = numpy.sqrt(abs(RMSD / L))\n \n	#U is simply V*Wt\n	U = numpy.dot(V, Wt)\n \n	# rotate and translate the molecule\n	stored.sel2 = numpy.dot((stored.mol2 - COM2), U)\n	stored.sel2 = stored.sel2.tolist()\n	# center the molecule\n	stored.sel1 = stored.mol1 - COM1\n	stored.sel1 = stored.sel1.tolist()\n \n	# let PyMol know about the changes to the coordinates\n	cmd.alter_state(1,mol1,"(x,y,z)=stored.sel1.pop(0)")\n	cmd.alter_state(1,mol2,"(x,y,z)=stored.sel2.pop(0)")\n \n	#print("Moved: %s Reference: %s RMSD = %f" % mol1, mol2, RMSD)\n	print("% s, % s,% 5.3f" % (mol1, mol2, RMSD))\n \n	# make the alignment OBVIOUS\n	cmd.hide('everything')\n	cmd.show('ribbon', sel1 + ' or ' + sel2)\n	cmd.color('gray70', mol1 )\n	cmd.color('magenta', mol2 )\n	cmd.color('red', 'visible')\n	cmd.show('ribbon', 'not visible')\n	cmd.center('visible')\n	cmd.orient()\n	cmd.zoom('visible')\n \ncmd.extend("optAlignRNA", optAlignRNA)
loadManyFiles=# Copyright (c) 2004 Robert L. Campbell\n#\n# Modified for use with Python3.\n# Jan. 29, 2020 \n# Blaine Mooers, PhD\n# Univ. of Oklahoma Health Sciences Center\n#\n#\nfrom pymol import cmd\nimport glob\n\ndef loadFiles(files):\n  """\n  load_files <files>\n\n  loads multiple files (using filename globbing)\n  into a multiple objects named as the files are (e.g. collection of\n  downloaded PDB files).\n\n  e.g. load_files prot_*.pdb\n  """\n  file_list = glob.glob(files)\n  if file_list:\n    file_list.sort()\n    for i in file_list:\n      #obj_name = i.replace('.pdb','')\n      #cmd.load(file_list[i],obj_name)\n      cmd.load(i)\n  else:\n    print("No files found for pattern %s" % files)\n\ncmd.extend('loadFiles',loadFiles)
loadAndAlignManyFiles3=# To save a multiple models in a file to separate pdb files.\nrun {1:~/Scripts/}saveSep.py\nsaveSep 
allPairs=[[%cursor%(x, y) for x in cmd.get_names()] for y in cmd.get_names()];
dssrBlock1=reinitialize;\nrun /Users/blaine/.pymol/startup/dssr_block.py;\nfetch 1ehz, async=0;\nas cartoon;\nset cartoon_ladder_radius, 0.1;\nset cartoon_ladder_color, gray;\nset cartoon_nucleic_acid_mode, 1;\nset cartoon_nucleic_acid_color, orange;\norient;turn z,30; translate [0,5,0]\ndssr_block;\npng ~/dssrBlock1.png 1600,1600
dssrBlock2=reinitialize;\nrun /Users/blaine/.pymol/startup/dssr_block.py;\nset cartoon_nucleic_acid_color, orange;\nfetch 1ehz, async=0;\ndssr_block block_file=wc
dssrBlock3=reinitialize;\n# Edit the path to Thomas Holder's block script.;\nrun ${1:"/Users/blaine/.pymol/startup/dssr_block.py;\nfetch %cursor%, async=0;\ndssr_block  %cursor%, 0;\nset all_states;
dssrBlock4=reinitialize;\n%cursor%;\nfetch %cursor%, async=0;\nset cartoon_nucleic_acid_color, %cursor%;\ndssr_block block_color=N red | minor 0.9 | major yellow;
nucleicAcidCartoon=# The dark blue used for electron density maps is called 'density'.;\nset cartoon_ladder_color, %cursor%;\n# The cartoon_ladder_radius should be renamed the cartoon_rung_radius. The dimensions are in Angstroms.;\nset cartoon_ladder_radius, %cursor%;\nset cartoon_nucleic_acid_color, %cursor%;\n# The cartoon ring modes range from 0 to 4.;\nset cartoon_ring_mode, %cursor%;
nucleicAcidCartoon2Strands=# There is not support for applying different settings to different selections.\n# Instead, this can be done for different objects.\n# Coloring two strand differently of a double helix makes it easier to for the viewer to distinguish the two strands.\n# The set command as the syntax of  setting_name [, setting_value [, selection [,state ]]]\n# In this case, the selection has to be global, object, object-state, or per-atom settings.\n# It cannot be a named selection.\n# Coloring two strand differently of a double helix makes it easier to for the viewer to distinguish the two strands.\n# Many double-stranded helices have one strand in the asymmetric unit.\n# The second strand is in the biological unit.;\n# The coordinates for the second strand are in the pdb1 file type at the PDB.;\n# The second strand is in the second state, which is equivalent to the second model in the pdb file.;\n# The strands are labeled chain A and B (via the cartoon_nucliec_acid_color setting).;\n# The bases are colored differently too (via the cartoon_ladder_color setting).;\nfetch %cursor%;\nset all_states, on;\ncreate chA, %cursor%, 1, 1;\ncreate chB, %cursor%, 2, 1;\n# colors only the backbone;\nset cartoon_nucleic_acid_color, %cursor%, chA;\nset cartoon_nucleic_acid_color, %cursor%, chB;\n# color the bases;\nset cartoon_ladder_color,  %cursor%, chA;\nset cartoon_ladder_color,  %cursor%, chB;\n
nucleicAcidColorbySequence=select rna_A, resn A;\nselect rna_C, resn C;\nselect rna_G, resn G;\nselect rna_U, resn U;\nselect dna_T, resn T;\ncolor %cursor%, rna_A;\ncolor %cursor%, rna_C; \ncolor %cursor%, rna_G;\ncolor %cursor%, rna_U;\ncolor %cursor%, dna_T;
nucleicAcidFlatRibbonColorbySequence=bg_color white;\nset cartoon_oval_length, %cursor%;\nset cartoon_oval_width, %cursor%;\ncartoon oval;\nset cartoon_ring_mode, %cursor%;\n# set the color of the backbone oval;\nset cartoon_nucleic_acid_color, %cursor%;\nselect rna_A, resn A;\nselect rna_C, resn C;\nselect rna_G, resn G;\nselect rna_U, resn U;\nselect dna_T, resn T;\ncolor %cursor%, rna_A;\ncolor %cursor%, rna_C; \ncolor %cursor%, rna_G;\ncolor %cursor%, rna_U;\ncolor %cursor%, dna_T;\nas cartoon;
nucleicAcidCartoonFilledRings=bg_color white;\nshow sticks;\nset cartoon_ring_mode, 3;\nset cartoon_ring_finder, 1;\nset cartoon_ladder_mode, 1;\nset cartoon_nucleic_acid_mode, 4;\nset cartoon_ring_transparency, 0.5;\nas cartoon;
basePairStacking=delete all;\nfetch 4PCO, type=pdb, async=0;\nselect G2G3, ( ((resi 2 or resi 3) and chain A) or ((resi 8 or resi 9) and chain B));\nremove not G2G3;\nbg_color white;\nshow sticks;\nset stick_radius=0.14;\nset stick_ball, on; \nset stick_ball_ratio,1.9;\nset_view (-0.75,0.09,0.66,-0.2,0.92,-0.35,-0.64,-0.39,-0.67,-0.0,-0.0,-43.7,7.24,9.55,11.78,29.46,57.91,-20.0);\nremove name H*;\nselect carbon1, element C and (resi 3 or resi 8) \n# select lower base pair;\nselect carbon2, element C and (resi 2 or resi 9) \n#select upper base pair;\ncolor gray70, carbon1;\ncolor gray10, carbon2;\nshow sticks;\nspace cmyk;\ndistance hbond1, /4PCO//B/U`9/N3,/4PCO//A/G`2/O6;\ndistance hbond2, /4PCO//B/U`9/O2,/4PCO//A/G`2/N1;\ndistance hbond3, /4PCO//A/U`3/N3,/4PCO//B/G`8/O6;\ndistance hbond4, /4PCO//A/U`3/O2,/4PCO//B/G`8/N1;\ncolor black, hbond1;\ncolor black, hbond2;\ncolor gray70, hbond3;\ncolor gray70, hbond4;\nshow nb_spheres;\nset nb_spheres_size, 0.35;\nhide labels;\nray 1600,1000;\npng 4PCO.png;\n
nucleicAcidDumbellCartoonColorbySequence=bg_color white;\nset cartoon_oval_length, %cursor%\nset cartoon_oval_width, %cursor%\ncartoon oval;\ncartoon dumbbell;\nset cartoon_dumbbell_width, 0.2;\nset cartoon_dumbbell_radius, 0.4;\nset cartoon_ring_mode, %cursor%;\n# set the color of the backbone oval\nset cartoon_nucleic_acid_color, %cursor%;\nselect rna_A, resn A;\nselect rna_C, resn C;\nselect rna_G, resn G;\nselect rna_U, resn U;\nselect dna_T, resn T;\ncolor %cursor%, rna_A;\ncolor %cursor%, rna_C; \ncolor %cursor%, rna_G;\ncolor %cursor%, rna_U;\ncolor %cursor%, dna_T;\nas cartoon;
stereokb=cmd.set_key('F1',lambda:cmd.stereo({'on':0,'off':1}[cmd.get('stereo')]));
listSettings2=list = setting.get_name_list();[print("%s => %s" % (name, setting.get_setting_text(name))) for name in list];
listSettings=[print("%s => %s" % (name, setting.get_setting_text(name))) for name in setting.get_name_list()];
displayFonts=python;\nfor i in range(1,21):\n     name = 'label%d' % i;\n     cmd.pseudoatom(name, label='label font id %d' % i, pos=(0,0,0));\n     cmd.set('label_font_id', i, name);\npython end;\ncmd.set('label_size', 50);\ncmd.set('grid_mode');\n
listObjects=objList = cmd.get_names("objects");print(objList);
listLigandProteinDistances=from pymol import cmd\n"""\nFind all distances betwen all ligand atoms and all protein atoms. \n\nAdapted and updated from script by Dan Kulp posted here\nhttps://sourceforge.net/p/pymol/mailman/message/10097804/\n\nThere are probably better solutions like finding just the \ndistances to proein atoms within a certain distance from \nthe ligand.\n\nDue to the nested for loops, this script is takes several second\nto run on a medium-sized human protein. This script is a \ngood candidate for vectorization. \n\nIt is also a good candiate for becoming a function and a shortcut. \n\n"""\n\n# customize these lines to your protein.\ncmd.fetch("6NEC")\ncmd.select("prot","not resn XIN and not resn HOH and not chain C")\ncmd.select("lig", "resn XIN and not chain C")\n\ndist_list = {}\npro_atoms = cmd.get_model("prot")\nlig_atoms = cmd.get_model("lig")\n\nfor l_at in lig_atoms.atom:\n    for p_at in pro_atoms.atom:\n        dist_list[str(l_at.resn) +\n                     ":" +\n                      str(l_at.resi) +\n                      " " +\n                      l_at.name +\n                      " ---- " + \n                      str(p_at.resn) +\n                      ":" +\n                      str(p_at.resi) +\n                      " " +\n                      p_at.name] = cmd.dist("foo", \n                                            "index " +\n                                            str(l_at.index),"index " + str(p_at.index))\n        cmd.delete("foo")\nprint("List of all pairwise ligand--protein atom-atom distances:")\n# [print("Distance of " + d + " is " + str(dist_list[d])) for d in dist_list.keys()]\n\n# More compact print statement. Need an f-string format statement.\n[print( d + " " + str(dist_list[d])) for d in dist_list.keys()]
nucleicAcidBackboneTubesSticks=set bg_rgb, white;\nhide everything, all;\n# Change to the name of your molecular object.;\nshow cartoon, %cursor%;\nset cartoon_sampling,1;\nset cartoon_tube_radius, 0.5;\nset cartoon_ladder_mode, 0;\n# Set to 0.0 to turn off transparency;\nset cartoon_transparency, %cursor%;\n# The default strick radisu is 0.25. I think it is too thick.;\nset stick_radius %cursor%;\nshow sticks;\nhide sticks, element H;
symexp=symexp %cursor%;
addAxis=python\nfrom pymol.cgo import *    # get constants\nfrom pymol import cmd\n\nimport math\n\nclass Counter:\n    """\n    draw_line\n    source https://www.pymolwiki.org/index.php/Symmetry_Axis\n    \n    Pymol script copyright Matthew O'Meara and Xavier Ambroggio 2007\n    \n    Under  GNU Free Documentation License 1.2\n    \n    Example:\n    \n    draw_axis(x=18.232, y=17.150, z=9.488,i=-.226639, j=0.708772, k=-.668039, r=1, b=0, g=0, width=1, length=100)\n    \n    Updated 15 June 2020 \n    Blaine Mooers\n    \n    Notes:\n    1) Could be useful for the adding a symmery axis, a ncs axis, or scale bar to a scene.\n    2) The postion (xyz) is the middle of the line, not one end as expected for a vector.\n    3) Another example: draw_axis(x=0, y=0, z=0,i=0, j=0, k=1, r=1, b=0, g=0, width=300, length=96) \n    4) Changed print statement to Python3 print function.\n    5) Replaced cmd.extend() with function generator.\n    """\n   def __init__(self):\n       self.state = 1\ncounter = Counter()\n\n@cmd.extend\ndef draw_axis(x=None, y=None, z=None, i=None, j=None, k=None, length=20.0, r=1.0, g=1.0, b=1.0, width=1.0 ):\n   if x == None or y == None or z == None or i == None or j == None or k== None :\n       print('Usage: draw_axis x,y,z, i,k,j, length, r,g,b, width')\n       print('draw a line centered at (x,y,z) with the direction vector (i,j,k)')\n       print('length, color (r,g,b), and width arguments are optional')\n#        print 'For a fun example of the command, run draw_axis_example'\n   else :\n       x,y,z = float(x), float(y), float(z)\n       i,j,k = float(i), float(j), float(k)\n       r,g,b = float(r), float(g), float(b)\n       width = float(width)\n       length = float(length) / 2.0\n\n       x1,y1,z1 = (x+i*length,y+j*length,z+k*length)\n       x2,y2,z2 = (x-i*length,y-j*length,z-k*length)\n\n       obj = [\n           LINEWIDTH, width,\n           BEGIN, LINES,\n\n           COLOR,   r,  g,  b,\n           VERTEX, x1, y1, z1,\n           VERTEX, x2, y2, z2,\n\n           END\n           ]\n\n       cmd.load_cgo(obj,'axis'+str(counter.state))\n       counter.state += 1\npython end\n
synch=cmd.sync(timeout=%cursor%);
renumResi=alter %cursor%);sort;
renumAtoms=alter {$1:3fa0}, ID=ID+%cursor%;\nsort;
renameChain=alter %cursor%;\nsort;
printAtomNumbers=iterate (resi %cursor%" % ID);
printAtomNames=iterate (resi %cursor%), print(name);
printBfactors=iterate (resi %cursor%), print(name + " %.2f" % b);
printVDWradii=iterate (resi %cursor%), print(name + " %.2f" % vdw);
printCoordinates=stored.coords = []; \niterate_state 1, (resi %cursor%), stored.coords.append([x,y,z]); \n[print(i) for i in stored.coords];
printNamesCoordinates=stored.names = [];  iterate_state 1, (resi %cursor%), stored.names.append([name]); \nstored.coords = []; iterate_state 1, (resi %cursor%)), stored.coords.append([x,y,z]); \n[print(i,j) for i,j in zip(stored.names, stored.coords)];
printNamesCoordinates=stored.coords = []; iterate_state 1, (resi %cursor%), stored.coords.append([x,y,z]); \nstored.names = [];  iterate_state 1, (resi %cursor%), stored.names.append([name]);\nstored.names3 = [tuple(i) for i in stored.names];\n[print(i,j) for i,j in(zip(stored.names3, stored.coords)];
emacsjupyterSourceBlock=#+BEGIN_SRC jupyter-python :session py :kernel pymol.python :exports both :results raw drawer \nfrom pymol import cmd\ncmd.do("reinitialize")\ncmd.bg_color("white")\ncmd.do("fetch 6VXX")\ncmd.do("zoom (resi 614 and chain A)")\ncmd.label(selection="chain A and resi 614 and name CB", expression="'%s-%s' % (resn,resi)")\ncmd.do("set label_color, black; set label_size, 48")\ncmd.do("set stick_radius, 0.12")\ncmd.do("hide cartoon; show sticks")\ncmd.do("set ray_shadows, 0")\ncmd.do("draw")\ncmd.do("png /Users/blaine/D614Gipython3.png, 600, 360, dpi=600")\nfrom IPython.display import Image\nfrom IPython.core.display import HTML\nPATH = "/Users/blaine/"\nImage(filename = PATH + "D614Gipython3.png", width=600, unconfined=True)\n#+END_SRC\n\n#+RESULTS:
obipythonSourceBlock=#+BEGIN_SRC ipython :session py :kernel pymol.python :exports both :results raw drawer \nfrom pymol import cmd\ncmd.do("reinitialize")\ncmd.bg_color("white")\ncmd.do("fetch 6VXX")\ncmd.do("zoom (resi 614 and chain A)")\ncmd.label(selection="chain A and resi 614 and name CB", expression="'%s-%s' % (resn,resi)")\ncmd.do("set label_color, black; set label_size, 48")\ncmd.do("set stick_radius, 0.12")\ncmd.do("hide cartoon; show sticks")\ncmd.do("set ray_shadows, 0")\ncmd.do("draw")\ncmd.do("png /Users/blaine/D614Gipython3.png, 600, 360, dpi=600")\nfrom IPython.display import Image\nfrom IPython.core.display import HTML\nPATH = "/Users/blaine/"\nImage(filename = PATH + "D614Gipython3.png", width=600, unconfined=True)\n#+END_SRC\n\n#+RESULTS:
importPyMOLcmd=from pymol import cmd
importIPythonDisplay=from IPython.display import Image\nfrom IPython.core.display import HTML\nPATH = "/Users/blaine/"
loadImage=Image(filename = PATH +"%cursor%, unconfined=True);
imports4PyMOLjupyter=from pymol import cmd\nfrom IPython.display import Image\nfrom IPython.core.display import HTML\nPATH = "/Users/blaine/"
getCoordinatespy=print(cmd.get_atom_coords(%cursor%));
fastapy=# Get the sequences of all molecular objects.;\nprint(cmd.get_fastastr('%cursor%'));
fetchThreeMaps=fetch %cursor%, type=pdb;\n# Make sure to rename map file so that ;\n# the root filename differs from pdb root filename;\nfetch %cursor%_2fofc, type=2fofc;\nfetch %cursor%_fofc, type=fofc;\nselect  %cursor%;\nisomesh %cursor%;\ncolor density, %cursor%;\nisomesh %cursor%;\ncolor green, %cursor%;\nisomesh %cursor%;\ncolor red, %cursor%;
scaleRadiusColorpy=cmd.do('bg_color white;')\ncmd.do('hide everything;')\ncmd.do('show spheres;')\ncmd.do('set  stick_radius = 0.1;')\ncmd.do('hide everything, HET;')\ncmd.do('show spheres, HET;')\ncmd.do('set sphere_quality=3;')\ncmd.do('show sticks, resi 1102;')\ncmd.do('from pymol import stored;')\ncmd.do('# set the stored array equal to the b−values or use your own values; ')\ncmd.do('stored.bb = [ ];')\ncmd.do('iterate all, stored.bb.append(b);')\n# scale the b−values;\ncmd.do('M = max(stored.bb);')\ncmd.do('scaledBB = map(lambda x: float (x/M), stored.bb);')\ncount = 0;\n# set the sphere radii independently;\nfor x in scaledBB:\n     cmd.set("sphere_scale", x ,"ID %s"%count)\n     count = count + 1\ncmd.do('spectrum b, selection=4gdx;')\ncmd.do('space cmyk;')\ncmd.do('set specular_intensity , 0.25;')
scaleRadiusColorPythonInsertpy=# scale the b−values;\nM = max(stored.bb);\nscaledBB = map(lambda x: float (x/M), stored.bb);\ncount = 0;\n# set the sphere radii independently;\n#[(cmd.set("sphere_scale", x ,"ID %s"%count); count = count + 1) for x in scaledBB]\nfor x in scaledBB:\n  cmd.set("sphere_scale", x ,"ID %s"%count)\n  count = count + 1
spngpy=import datetime;\nfrom pymol import cmd; \nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT); \ncmd.save(stemName+s+".png"); \n
displayFontspy=for i in range(1,21):\n     name = 'label%d' % i;\n     cmd.pseudoatom(name, label='label font id %d' % i, pos=(0,0,0));\n     cmd.set('label_font_id', i, name);\ncmd.set('label_size', 50);\ncmd.set('grid_mode');\n
aveB4resiXpy=# AveBResiX, prints the resiude number and the average bfactor.;\n# Uses reduce and lambda, builtin Python functional porgramming functions.;\n# Note that you need to convert the length of the list of Bfactors from an integer to a float before division into the sum.;\nBfactors = [];\n# edit the selection below, which is a range of residue numbers here.;\niterate (resi %cursor%), Bfactors.append(b);\nprint( "Average B-factor of residue ", %{1:133} , "   = ", "%.2f" %(reduce(lambda x, y: x + y, Bfactors) / float(len(Bfactors))) );
sc441=run $HOME/%cursor%supercell.py;\nsupercell 4, 4, 1, ,  %cursor%, 1;
sc444=run $HOME/%cursor%supercell.py;\nsupercell 4, 4, 4, ,  %cursor%, 1;
sc414=run $HOME/%cursor%supercell.py;\nsupercell 4, 1, 4, ,  %cursor%, 1;
sc144=run $HOME/%cursor%supercell.py;\nsupercell 1, 4, 4, ,  %cursor%, 1;
sc444=run $HOME/%cursor%supercell.py;\nsupercell 4, 4, 4, ,  %cursor%, 1;
sdaepy=import datetime;\nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT); \ncmd.save(stemName+s+".dae"); \n
sccp4py=import datetime;\nfrom pymol import cmd; \nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT); \ncmd.save(stemName+s+".ccp4"); 
salnpy=import datetime;\nfrom pymol import cmd;\nDT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");\ns = str(DT);\ncmd.save(stemName+s+".aln");\n
lspymolrcpy=print(invocation.options.deferred);
printDocpy=print(%cursor%.__doc__);
printPathpy=# Print the path to the current used PyMOL binary.\nprint(pymol.__path__)
pymoldocspy=[help(i) for i in dir(pymol)];
aobw=# Note: requires the gscale() function from pymolshortcuts.py.\n# Download this script from http://GitHub.com/MooersLab/pymolshortcuts.\n# Load the functions from this script with the command 'run pymolshortcuts.py'\nset_color oxygen, [1.0,0.4,0.4];\nset_color nitrogen, [0.5,0.5,1.0];\nremove solvent;\nas spheres;\nutil.cbaw;\nbg white;\ngscale();\nset light_count,10;\nset spec_count,1;\nset shininess, 10;\nset specular,0.25;\nset ambient,0;\nset direct,0;\nset reflect,1.5;\nset ray_shadow_decay_factor, 0.1;\nset ray_shadow_decay_range, 2;\nset depth_cue, 0;\nray;\n
aod=set_color oxygen, [1.0,0.4,0.4];\nset_color nitrogen, [0.5,0.5,1.0];\nremove solvent;\nas spheres;\nutil.cbaw;\nbg white;\nset light_count,10;\nset spec_count,1;\nset shininess, 10;\nset specular,0.25;\nset ambient,0;\nset direct,0;\nset reflect,1.5;\nset ray_shadow_decay_factor, 0.1;\nset ray_shadow_decay_range, 2;\ncolor gray00, symbol c\ncolor gray90, symbol h\nset depth_cue, 0;\nray;\n
aodbw=# Note: requires the gscale() function from pymolshortcuts.py.\n# Download this script from http://GitHub.com/MooersLab/pymolshortcuts.\n# Load the functions from this script with the command 'run pymolshortcuts.py'\nset_color oxygen, [1.0,0.4,0.4];\nset_color nitrogen, [0.5,0.5,1.0];\nremove solvent;\nas spheres;\nutil.cbaw;\nbg white;\ngscale();\nset light_count,10;\nset spec_count,1;\nset shininess, 10;\nset specular,0.25;\nset ambient,0;\nset direct,0;\nset reflect,1.5;\nset ray_shadow_decay_factor, 0.1;\nset ray_shadow_decay_range, 2;\nset depth_cue, 0;\nray;\n
addAxispy=from pymol.cgo import *    # get constants\nfrom pymol import cmd\n\nimport math\n\nclass Counter:\n    """\n    draw_line\n    source https://www.pymolwiki.org/index.php/Symmetry_Axis\n    \n    Pymol script copyright Matthew O'Meara and Xavier Ambroggio 2007\n    \n    Under  GNU Free Documentation License 1.2\n    \n    Example:\n    \n    draw_axis(x=18.232, y=17.150, z=9.488,i=-.226639, j=0.708772, k=-.668039, r=1, b=0, g=0, width=1, length=100)\n    \n    Updated 15 June 2020 \n    Blaine Mooers\n    \n    Notes:\n    1) Could be useful for the adding a symmery axis, a ncs axis, or scale bar to a scene.\n    2) The postion (xyz) is the middle of the line, not one end as expected for a vector.\n    3) Another example: draw_axis(x=0, y=0, z=0,i=0, j=0, k=1, r=1, b=0, g=0, width=300, length=96) \n    4) Changed print statement to Python3 print function.\n    5) Replaced cmd.extend() with function generator.\n    """\n   def __init__(self):\n       self.state = 1\ncounter = Counter()\n\n@cmd.extend\ndef draw_axis(x=None, y=None, z=None, i=None, j=None, k=None, length=20.0, r=1.0, g=1.0, b=1.0, width=1.0 ):\n   if x == None or y == None or z == None or i == None or j == None or k== None :\n       print('Usage: draw_axis x,y,z, i,k,j, length, r,g,b, width')\n       print('draw a line centered at (x,y,z) with the direction vector (i,j,k)')\n       print('length, color (r,g,b), and width arguments are optional')\n#        print 'For a fun example of the command, run draw_axis_example'\n   else :\n       x,y,z = float(x), float(y), float(z)\n       i,j,k = float(i), float(j), float(k)\n       r,g,b = float(r), float(g), float(b)\n       width = float(width)\n       length = float(length) / 2.0\n\n       x1,y1,z1 = (x+i*length,y+j*length,z+k*length)\n       x2,y2,z2 = (x-i*length,y-j*length,z-k*length)\n\n       obj = [\n           LINEWIDTH, width,\n           BEGIN, LINES,\n\n           COLOR,   r,  g,  b,\n           VERTEX, x1, y1, z1,\n           VERTEX, x2, y2, z2,\n\n           END\n           ]\n\n       cmd.load_cgo(obj,'axis'+str(counter.state))\n       counter.state += 1\n
grayscalepy=def grayscale(selection="all"):\n    """Apply by entering grayscale()"""\n    cmd.color('grey64', 'elem Ac')\n    cmd.color('grey67', 'elem Al')\n    cmd.color('grey39', 'elem Am')\n    cmd.color('grey46', 'elem Sb')\n    cmd.color('grey75', 'elem Ar')\n    cmd.color('grey58', 'elem As')\n    cmd.color('grey33', 'elem At')\n    cmd.color('grey56', 'elem Ba')\n    cmd.color('grey40', 'elem Bk')\n    cmd.color('grey87', 'elem Be')\n    cmd.color('grey40', 'elem Bi')\n    cmd.color('grey20', 'elem Bh')\n    cmd.color('grey77', 'elem B')\n    cmd.color('grey26', 'elem Br')\n    cmd.color('grey86', 'elem Cd')\n    cmd.color('grey76', 'elem Ca')\n    cmd.color('grey34', 'elem Cf')\n    cmd.color('grey77', 'elem C')\n    cmd.color('grey98', 'elem Ce')\n    cmd.color('grey17', 'elem Cs')\n    cmd.color('grey70', 'elem Cl')\n    cmd.color('grey60', 'elem Cr')\n    cmd.color('grey64', 'elem Co')\n    cmd.color('grey54', 'elem Cu')\n    cmd.color('grey42', 'elem Cm')\n    cmd.color('grey89', 'elem D')\n    cmd.color('grey19', 'elem Db')\n    cmd.color('grey79', 'elem Dy')\n    cmd.color('grey29', 'elem Es')\n    cmd.color('grey67', 'elem Er')\n    cmd.color('grey85', 'elem Eu')\n    cmd.color('grey28', 'elem Fm')\n    cmd.color('grey93', 'elem F')\n    cmd.color('grey8', 'elem Fr')\n    cmd.color('grey82', 'elem Gd')\n    cmd.color('grey60', 'elem Ga')\n    cmd.color('grey52', 'elem Ge')\n    cmd.color('grey80', 'elem Au')\n    cmd.color('grey68', 'elem Hf')\n    cmd.color('grey20', 'elem Hs')\n    cmd.color('grey96', 'elem He')\n    cmd.color('grey75', 'elem Ho')\n    cmd.color('grey89', 'elem H')\n    cmd.color('grey49', 'elem In')\n    cmd.color('grey16', 'elem I')\n    cmd.color('grey29', 'elem Ir')\n    cmd.color('grey48', 'elem Fe')\n    cmd.color('grey65', 'elem Kr')\n    cmd.color('grey76', 'elem La')\n    cmd.color('grey19', 'elem Lr')\n    cmd.color('grey34', 'elem Pb')\n    cmd.color('grey60', 'elem Li')\n    cmd.color('grey48', 'elem Lu')\n    cmd.color('grey83', 'elem Mg')\n    cmd.color('grey52', 'elem Mn')\n    cmd.color('grey20', 'elem Mt')\n    cmd.color('grey23', 'elem Md')\n    cmd.color('grey72', 'elem Hg')\n    cmd.color('grey62', 'elem Mo')\n    cmd.color('grey93', 'elem Nd')\n    cmd.color('grey85', 'elem Ne')\n    cmd.color('grey43', 'elem Np')\n    cmd.color('grey67', 'elem Ni')\n    cmd.color('grey69', 'elem Nb')\n    cmd.color('grey25', 'elem N')\n    cmd.color('grey23', 'elem No')\n    cmd.color('grey36', 'elem Os')\n    cmd.color('grey44', 'elem O')\n    cmd.color('grey33', 'elem Pd')\n    cmd.color('grey57', 'elem P')\n    cmd.color('grey82', 'elem Pt')\n    cmd.color('grey37', 'elem Pu')\n    cmd.color('grey40', 'elem Po')\n    cmd.color('grey35', 'elem K')\n    cmd.color('grey95', 'elem Pr')\n    cmd.color('grey90', 'elem Pm')\n    cmd.color('grey52', 'elem Pa')\n    cmd.color('grey35', 'elem Ra')\n    cmd.color('grey46', 'elem Rn')\n    cmd.color('grey43', 'elem Re')\n    cmd.color('grey39', 'elem Rh')\n    cmd.color('grey27', 'elem Rb')\n    cmd.color('grey47', 'elem Ru')\n    cmd.color('grey19', 'elem Rf')\n    cmd.color('grey89', 'elem Sm')\n    cmd.color('grey90', 'elem Sc')\n    cmd.color('grey20', 'elem Sg')\n    cmd.color('grey66', 'elem Se')\n    cmd.color('grey80', 'elem Si')\n    cmd.color('grey75', 'elem Ag')\n    cmd.color('grey46', 'elem Na')\n    cmd.color('grey71', 'elem Sr')\n    cmd.color('grey76', 'elem S')\n    cmd.color('grey60', 'elem Ta')\n    cmd.color('grey53', 'elem Tc')\n    cmd.color('grey51', 'elem Te')\n    cmd.color('grey81', 'elem Tb')\n    cmd.color('grey39', 'elem Tl')\n    cmd.color('grey59', 'elem Th')\n    cmd.color('grey61', 'elem Tm')\n    cmd.color('grey48', 'elem Sn')\n    cmd.color('grey75', 'elem Ti')\n    cmd.color('grey50', 'elem W')\n    cmd.color('grey47', 'elem U')\n    cmd.color('grey65', 'elem V')\n    cmd.color('grey54', 'elem Xe')\n    cmd.color('grey55', 'elem Yb')\n    cmd.color('grey91', 'elem Y')\n    cmd.color('grey51', 'elem Zn')\n    cmd.color('grey81', 'elem Zr')\ncmd.extend('grayscale',grayscale)
importShortcuts=cmd.do('run /Users/blaine/Scripts/PyMOLScripts/pymolshortcuts.py')
rv=cmd.do('rv')
AO=cmd.do('AO')
AOBW=cmd.do('AOBW')
AOD=cmd.do('AOD')
AODBW=cmd.do('AODBW')
unitCellEdgesColorBlack=# show the unit cell;\nshow cell;\ncolor black, %cursor%;\n# color by atom with carbons colored green,\nutil.%cursor%;\nset cgo_line_width, 2.5;\npng  %cursor%
printColorByAtomCodes=print('util.cbag, green carbons atoms \nutil.cbac, cyan carbon atoms \nutil.cbam, magenta carbon atoms \nutil.cbay, yellow carbons atoms \nutil.cbas, salmon carbons atoms \nutil.cbaw, white carbons atoms \nutil.cbab, slate carbons atoms \nutil.cbao, bright orange carbons atoms \nutil.cbap, purple carbons atoms \nutil.cbap, pink carbons atoms')
grayscale=python\ndef grayscale(selection="all"):\n    """Apply by entering grayscale"""\n    cmd.color('grey64', 'elem Ac')\n    cmd.color('grey67', 'elem Al')\n    cmd.color('grey39', 'elem Am')\n    cmd.color('grey46', 'elem Sb')\n    cmd.color('grey75', 'elem Ar')\n    cmd.color('grey58', 'elem As')\n    cmd.color('grey33', 'elem At')\n    cmd.color('grey56', 'elem Ba')\n    cmd.color('grey40', 'elem Bk')\n    cmd.color('grey87', 'elem Be')\n    cmd.color('grey40', 'elem Bi')\n    cmd.color('grey20', 'elem Bh')\n    cmd.color('grey77', 'elem B')\n    cmd.color('grey26', 'elem Br')\n    cmd.color('grey86', 'elem Cd')\n    cmd.color('grey76', 'elem Ca')\n    cmd.color('grey34', 'elem Cf')\n    cmd.color('grey77', 'elem C')\n    cmd.color('grey98', 'elem Ce')\n    cmd.color('grey17', 'elem Cs')\n    cmd.color('grey70', 'elem Cl')\n    cmd.color('grey60', 'elem Cr')\n    cmd.color('grey64', 'elem Co')\n    cmd.color('grey54', 'elem Cu')\n    cmd.color('grey42', 'elem Cm')\n    cmd.color('grey89', 'elem D')\n    cmd.color('grey19', 'elem Db')\n    cmd.color('grey79', 'elem Dy')\n    cmd.color('grey29', 'elem Es')\n    cmd.color('grey67', 'elem Er')\n    cmd.color('grey85', 'elem Eu')\n    cmd.color('grey28', 'elem Fm')\n    cmd.color('grey93', 'elem F')\n    cmd.color('grey8', 'elem Fr')\n    cmd.color('grey82', 'elem Gd')\n    cmd.color('grey60', 'elem Ga')\n    cmd.color('grey52', 'elem Ge')\n    cmd.color('grey80', 'elem Au')\n    cmd.color('grey68', 'elem Hf')\n    cmd.color('grey20', 'elem Hs')\n    cmd.color('grey96', 'elem He')\n    cmd.color('grey75', 'elem Ho')\n    cmd.color('grey89', 'elem H')\n    cmd.color('grey49', 'elem In')\n    cmd.color('grey16', 'elem I')\n    cmd.color('grey29', 'elem Ir')\n    cmd.color('grey48', 'elem Fe')\n    cmd.color('grey65', 'elem Kr')\n    cmd.color('grey76', 'elem La')\n    cmd.color('grey19', 'elem Lr')\n    cmd.color('grey34', 'elem Pb')\n    cmd.color('grey60', 'elem Li')\n    cmd.color('grey48', 'elem Lu')\n    cmd.color('grey83', 'elem Mg')\n    cmd.color('grey52', 'elem Mn')\n    cmd.color('grey20', 'elem Mt')\n    cmd.color('grey23', 'elem Md')\n    cmd.color('grey72', 'elem Hg')\n    cmd.color('grey62', 'elem Mo')\n    cmd.color('grey93', 'elem Nd')\n    cmd.color('grey85', 'elem Ne')\n    cmd.color('grey43', 'elem Np')\n    cmd.color('grey67', 'elem Ni')\n    cmd.color('grey69', 'elem Nb')\n    cmd.color('grey25', 'elem N')\n    cmd.color('grey23', 'elem No')\n    cmd.color('grey36', 'elem Os')\n    cmd.color('grey44', 'elem O')\n    cmd.color('grey33', 'elem Pd')\n    cmd.color('grey57', 'elem P')\n    cmd.color('grey82', 'elem Pt')\n    cmd.color('grey37', 'elem Pu')\n    cmd.color('grey40', 'elem Po')\n    cmd.color('grey35', 'elem K')\n    cmd.color('grey95', 'elem Pr')\n    cmd.color('grey90', 'elem Pm')\n    cmd.color('grey52', 'elem Pa')\n    cmd.color('grey35', 'elem Ra')\n    cmd.color('grey46', 'elem Rn')\n    cmd.color('grey43', 'elem Re')\n    cmd.color('grey39', 'elem Rh')\n    cmd.color('grey27', 'elem Rb')\n    cmd.color('grey47', 'elem Ru')\n    cmd.color('grey19', 'elem Rf')\n    cmd.color('grey89', 'elem Sm')\n    cmd.color('grey90', 'elem Sc')\n    cmd.color('grey20', 'elem Sg')\n    cmd.color('grey66', 'elem Se')\n    cmd.color('grey80', 'elem Si')\n    cmd.color('grey75', 'elem Ag')\n    cmd.color('grey46', 'elem Na')\n    cmd.color('grey71', 'elem Sr')\n    cmd.color('grey76', 'elem S')\n    cmd.color('grey60', 'elem Ta')\n    cmd.color('grey53', 'elem Tc')\n    cmd.color('grey51', 'elem Te')\n    cmd.color('grey81', 'elem Tb')\n    cmd.color('grey39', 'elem Tl')\n    cmd.color('grey59', 'elem Th')\n    cmd.color('grey61', 'elem Tm')\n    cmd.color('grey48', 'elem Sn')\n    cmd.color('grey75', 'elem Ti')\n    cmd.color('grey50', 'elem W')\n    cmd.color('grey47', 'elem U')\n    cmd.color('grey65', 'elem V')\n    cmd.color('grey54', 'elem Xe')\n    cmd.color('grey55', 'elem Yb')\n    cmd.color('grey91', 'elem Y')\n    cmd.color('grey51', 'elem Zn')\n    cmd.color('grey81', 'elem Zr')\ncmd.extend('grayscale',grayscale)\npython end\n
yrb=cmd.do('yrb')
timcolor=cmd.do('timcolor')
colorh1=cmd.do('colorh1')
colorh2=cmd.do('colorh2')
cav=cmd.do('cav')
PE125=cmd.do('PE125')
PE25=cmd.do('PE25')
PE50=cmd.do('PE50')
PE75=cmd.do('PE75')
PE85=cmd.do('PE85')
PE66=cmd.do('PE66')
PE33=cmd.do('PE33')
cntccp4emaps=print("Count the number of ccp4 electron density files in current directory.");\nprint("Usage: cntccp4s");\nmyPath = os.getcwd();\nccp4Counter = len(glob.glob1(myPath,"*.pse"));\nprint("Number of number of ccp4 electron density files in the current directory: ", ccp4Counter);
cntfiles=print("Count the files in the directory.")\nprint("Usage: cntfiles.")\n# simple version for working with CWD\nprint("Number of files in current working directory: ", len([name for name in os.listdir('.') if os.path.isfile(name)]))
cntlogs=print("Count the number of log image files in current directory.");\nprint("Usage: cntlogs");\nmyPath = os.getcwd();\nlogCounter = len(glob.glob1(myPath,"*.log"));\nprint("Number of number of log image files in the current directory: ", logCounter);
cntmtzs=print("Count the number of mtz structure factor files in current directory.");\nprint("Usage: cntmtzs");\nmyPath = os.getcwd();\nmtzCounter = len(glob.glob1(myPath,"*.mtz"));\nprint("Number of number of mtz structure factor  files in the current directory: ", mtzCounter);
cntpdbs=print("Count the number of pdb files in the current directory.")\nprint("Usage: cntpdb")\nmyPath = os.getcwd()\npdbCounter = len(glob.glob1(myPath,"*.pdb"))\nprint("Number of pdb files in the current directory: ", pdbCounter)
cntpmls=print("Count the number of pml (Pymol macro language) files in current directory.");\nprint("Usage: cntpmls");\nmyPath = os.getcwd();\npmlCounter = len(glob.glob1(myPath,"*.pml"));\nprint("Number of pml files in the current directory: ", pmlCounter);
cntpngs=print("Count the number of png image files in current directory.");\nprint("Usage: cntpngs");\nmyPath = os.getcwd();\npngCounter = len(glob.glob1(myPath,"*.png"));\nprint("Number of number of png image files in the current directory: ", pngCounter);
cntpses=print("Count the number of *.pse (session) files in current directory.");\nprint("Usage: cntpses");\nmyPath = os.getcwd();\npseCounter = len(glob.glob1(myPath,"*.pse"));\nprint("Number of *.pse (session) files in the current directory: ", pseCounter);
rmhb=cmd.delete('hbonds')
hb=cmd.distance("hbonds", "all", "all", "3.2", mode="2")\ncmd.set("dash_gap","0.4")\ncmd.set("dash_color","grey30")\ncmd.set("dash_width","1.5")\ncmd.set("dash_length",".25")\nprint("Enter 'rmhb' to remove the hbonds.")
rmd=cmd.do('delete measure*')\ncmd.do('delete m*_*')\ncmd.do('delete dist*')
nmr=set all_states, on
nmroff=set all_states, off
nmroffpy=cmd.do('set all_states, off')
nmrpy=cmd.do('set all_states, on')
loadAndAlignManyFiles1=# To load a bunch of related files from inside PyMOL all at once;\nrun %cursor%loadFiles.py;\nloadFiles %cursor%.pdb;
loadAndAlignManyFiles2=# To align all of the loaded RNA structures in all possible combinations by their C1' carbon atoms;\n#  Yes, this construct is a list comprehension inside a list comprehension!;\nrun %cursor%optAlignRNA.py;\n[[optAlignRNA(x, y) for x in cmd.get_names()] for y in cmd.get_names()];
optAlignRNA=python\n ##############################################################################\n#\n# @SUMMARY: -- QKabsch.py.  A python implementation of the optimal superposition\n#     of two sets of vectors as proposed by Kabsch 1976 & 1978.\n#\n# @AUTHOR: Jason Vertrees\n# @COPYRIGHT: Jason Vertrees (C), 2005-2007\n# @LICENSE: Released under GPL:\n# This program is free software; you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation; either version 2 of the License, or\n#    (at your option) any later version.\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along with\n# this program; if not, write to the Free Software Foundation, Inc., 51 Franklin\n# Street, Fifth Floor, Boston, MA 02110-1301, USA \n#\n# DATE  : 2007-01-01\n# REV   : 2\n# REQUIREMENTS: numpy\n#\n#\n# Modified optAlign.py to use C1' carbon atoms of RNA for alignment.\n# Jan. 29, 2020 \n# Blaine Mooers, PhD\n# Univ. of Oklahoma Health Sciences Center\n#\n#############################################################################\nfrom array import *\n \n# system stuff\nimport os\nimport copy\n \n# pretty printing\nimport pprint\n \n# for importing as a plugin into PyMol\nfrom pymol import cmd\nfrom pymol import stored\nfrom pymol import selector\n \n# using numpy for linear algebra\nimport numpy\n \ndef optAlignRNA( sel1, sel2 ):\n	"""\n	optAlignRNA performs the Kabsch alignment algorithm upon the C1' carbons of two selections.\n	Example: optAlignRNA 1JU7 and i. 1-16 and n. C1', 1CLL and i. 4-146 and n. C1'\n \n	Two RMSDs are returned.  One comes from the Kabsch algorithm and the other from\n	PyMOL based upon your selections.\n	\n	This function can be run in a for loop to fit multiple structures  with a common prefix name:\n	\n	for x in cmd.get_names(): optAlignRNA(x, "1JU7_0001")\n	 \n	or get the rmsds for all combinations, do the following:\n	 \n	[[optAlignRNA(x, y) for x in cmd.get_names()] for y in cmd.get_names()]\n\n	"""\n	cmd.reset()\n \n	# make the lists for holding coordinates\n	# partial lists\n	stored.sel1 = []\n	stored.sel2 = []\n	# full lists\n	stored.mol1 = []\n	stored.mol2 = []\n \n	# -- CUT HERE\n	sel1 += " and N. C1'"\n	sel2 += " and N. C1'"\n	# -- CUT HERE\n \n	# Get the selected coordinates.  We\n	# align these coords.\n	cmd.iterate_state(1, selector.process(sel1), "stored.sel1.append([x,y,z])")\n	cmd.iterate_state(1, selector.process(sel2), "stored.sel2.append([x,y,z])")\n \n	# get molecule name\n	mol1 = cmd.identify(sel1,1)[0][0]\n	mol2 = cmd.identify(sel2,1)[0][0]\n \n	# Get all molecule coords.  We do this because\n	# we have to rotate the whole molcule, not just\n	# the aligned selection\n	cmd.iterate_state(1, mol1, "stored.mol1.append([x,y,z])")\n	cmd.iterate_state(1, mol2, "stored.mol2.append([x,y,z])")\n \n	# check for consistency\n	assert len(stored.sel1) == len(stored.sel2)\n	L = len(stored.sel1)\n	assert L > 0\n \n	# must alway center the two proteins to avoid\n	# affine transformations.  Center the two proteins\n	# to their selections.\n	COM1 = numpy.sum(stored.sel1,axis=0) / float(L)\n	COM2 = numpy.sum(stored.sel2,axis=0) / float(L)\n	stored.sel1 -= COM1\n	stored.sel2 -= COM2\n \n	# Initial residual, see Kabsch.\n	E0 = numpy.sum( numpy.sum(stored.sel1 * stored.sel1,axis=0),axis=0) + numpy.sum( numpy.sum(stored.sel2 * stored.sel2,axis=0),axis=0)\n \n	#\n	# This beautiful step provides the answer.  V and Wt are the orthonormal\n	# bases that when multiplied by each other give us the rotation matrix, U.\n	# S, (Sigma, from SVD) provides us with the error!  Isn't SVD great!\n	V, S, Wt = numpy.linalg.svd( numpy.dot( numpy.transpose(stored.sel2), stored.sel1))\n \n	# we already have our solution, in the results from SVD.\n	# we just need to check for reflections and then produce\n	# the rotation.  V and Wt are orthonormal, so their det's\n	# are +/-1.\n	reflect = float(str(float(numpy.linalg.det(V) * numpy.linalg.det(Wt))))\n \n	if reflect == -1.0:\n		S[-1] = -S[-1]\n		V[:,-1] = -V[:,-1]\n \n	RMSD = E0 - (2.0 * sum(S))\n	RMSD = numpy.sqrt(abs(RMSD / L))\n \n	#U is simply V*Wt\n	U = numpy.dot(V, Wt)\n \n	# rotate and translate the molecule\n	stored.sel2 = numpy.dot((stored.mol2 - COM2), U)\n	stored.sel2 = stored.sel2.tolist()\n	# center the molecule\n	stored.sel1 = stored.mol1 - COM1\n	stored.sel1 = stored.sel1.tolist()\n \n	# let PyMol know about the changes to the coordinates\n	cmd.alter_state(1,mol1,"(x,y,z)=stored.sel1.pop(0)")\n	cmd.alter_state(1,mol2,"(x,y,z)=stored.sel2.pop(0)")\n \n	#print("Moved: %s Reference: %s RMSD = %f" % mol1, mol2, RMSD)\n	print("% s, % s,% 5.3f" % (mol1, mol2, RMSD))\n \n	# make the alignment OBVIOUS\n	cmd.hide('everything')\n	cmd.show('ribbon', sel1 + ' or ' + sel2)\n	cmd.color('gray70', mol1 )\n	cmd.color('magenta', mol2 )\n	cmd.color('red', 'visible')\n	cmd.show('ribbon', 'not visible')\n	cmd.center('visible')\n	cmd.orient()\n	cmd.zoom('visible')\n \ncmd.extend("optAlignRNA", optAlignRNA)\npython end
ao=set_color oxygen, [1.0,0.4,0.4];\nset_color nitrogen, [0.5,0.5,1.0];\nremove solvent;\nas spheres;\nutil.cbaw;\nbg white;\nset light_count,10;\nset spec_count,1;\nset shininess, 10;\nset specular,0.25;\nset ambient,0;\nset direct,0;\nset reflect,1.5;\nset ray_shadow_decay_factor, 0.1;\nset ray_shadow_decay_range, 2;\nset depth_cue, 0;\nray;\n
bsfr=# Edit the selection that is named ligand here.;\ncreate ligand, %cursor%;\npreset.ball_and_stick(selection='ligand');\nutil.cbaw ligand;\nset stick_color, white, ligand;\nset valence, off, ligand;\nunset valence;\n# above command is required after using preset;\nset sphere_color, black, elem C and ligand;\nset sphere_color, red, elem O and ligand;\nset sphere_color, blue, elem N and ligand;\nset sphere_color, lightblue, elem F and ligand;\nset stick_radius, 0.12;\nset sphere_quality, 4;\nset cartoon_ring_finder, 4, ligand;\nset cartoon_ring_mode, 3, ligand;\nset cartoon_ring_width, 0.12, ligand;\nset cartoon_ring_transparency, .0, ligand;\nshow cartoon, ligand;
wallart=# Reset hash_max from 100 to 2000 to enable the saving of images of large size for office wall hangings, eg. 30 x 30 inches. \nhash_max=2000
wallartpy=# Reset hash_max from 100 to 2000 to enable the saving of images of large size for office wall hangings, eg. 30 x 30 inches.;\ncmd.do("hash_max=2000");
cblindCartoon=# CB is a shortcut or funtion in the pymolshortcut.py file.\n# Load this function by entering 'run pymolshortcuts.py' first.\nCB;\ncolor cb_lightblue, ss h;\ncolor cb_vermillion, ss s;\ncolor lightorange, ss l+'';\n

