snippet ao
abbr    ao
alias   ao
    set_color oxygen, [1.0,0.4,0.4];
    set_color nitrogen, [0.5,0.5,1.0];
    remove solvent;
    as spheres;
    # the 'as' command is a shortcut for show_as
    util.cbaw;
    # 'cba' represents 'color by atom'. 
    # The last letter represents the colore of the carbon atom.
    bg white;
    # bg is an alias for bg_color or background color.
    set light_count,10;
    # light_count is the number of light sources. 
    # The max is 10. The defualt is 10.
    set spec_count,1;
    # Not documented on Wiki.
    set shininess, 10;
    # sets the shininess of the object.
    set specular,0.25;
    # Controls the amount of directly reflected light and not the shininess of the reflection.
    set ambient,0;
    # Controls the amount of ambient light. Default is 0. Ranges from -1 to 1.
    set direct,0;  
    # Not documented on Wiki.
    set reflect,1.5;
    # Controls the amount of light reflection and the effect that directional light has on shadows 
    # and the general lighting of the scene. Default value is 0.5.
    set ray_shadow_decay_factor, 0.1;
    set ray_shadow_decay_range, 2;
    set depth_cue, 0;
    ray;

snippet sas
abbr    sas
alias   sas
    set surface_solvent, ${1:on}

snippet ellipcol
abbr    ellipcol
alias   ellipcol
    # set the colore of the thermal ellipsoids;
    # PyMOL colors: https://pymolwiki.org/index.php/Color_Values;
    set ellipsoid_color, ${1:red};

snippet sigdist
abbr    sigdist
alias   sigdist
    set label_distance_digits, ${1:2};

snippet sigang
abbr    sigang
alias   sigang
    set label_angle_digits, ${1:2};

snippet bs
abbr    bs
alias   bs
    show sticks;
    set stick_radius, 0.12;
    set stick_ball, on;
    set stick_ball_ratio, 1.9;
    show nb_spheres;
    set nb_spheres_size=0.33;

snippet stack
abbr    stack
alias   stack
    delete all;
    fetch ${1:4PCO}, type=pdb,async=0;
    select ${2:G2G3}, ( ((resi ${3:2} or resi ${4:3}) and chain A) or ((resi ${5:8} or resi ${6:9}) and chain B) );
    hide everything, element h; 
    remove not ${2:G2G3};
    bg_color white;
    show sticks;
    set stick_radius=0.14;
    set stick_ball, on; 
    set stick_ball_ratio,1.9;
    set_view (-0.75,0.09,0.66,-0.2,0.92,-0.35,-0.64,-0.39,-0.67,-0.0,-0.0,-43.7,7. 24,9.55,11.78,29.46,57.91,-20.0);
    hide everything, element H;
    select carbon1, element C and (resi ${4:3} or resi ${5:8}); 
    # select lower base pair;
    select carbon2, element C and (resi ${3:2} or resi ${6:9});
    #select upper base pair;
    color gray70,carbon1;
    color gray10,carbon2;
    space cmyk;
    distance hbond1,/${1:4PCO}//B/U`9/N3,/${1:4PCO}//A/G`2/O6;
    distance hbond2,/${1:4PCO}//B/U`9/O2,/${1:4PCO}//A/G`2/N1;
    distance hbond3,/${1:4PCO}//A/U`3/N3,/${1:4PCO}//B/G`8/O6;
    distance hbond4,/${1:4PCO}//A/U`3/O2,/${1:4PCO}//B/G`8/N1;
    color black, hbond1;
    color black, hbond2;
    color gray70, hbond3;
    color gray70, hbond4;
    show nb_spheres;
    set nb_spheres_size, 0.35;
    hide labels;
    ray 1600,1000;
    png ${1:4PCO}.png

snippet bu
abbr    bu
alias   bu
    # Edit the path to the file quat.py.;
    # You may have to download it from the PyMOL Wiki page.;
    run ~/${1:Scripts/PyMOLScripts}/quat.py; quat;

snippet doubleBond
abbr    doubleBond
alias   doubleBond
    set valence, 1; 
    set valence_mode, 1;

snippet cblind
abbr    cblind
alias   cblind
    # Edit the path to the Pymol-script-repo in your computer account.;
    # See PyMOL wiki for more information about the Pymol-script-reo.;
    run ~/${1:Pymol-script-repo}/colorblindfriendly.py;
    as cartoon;
    color cb_red, ss H;
    color cb_yellow,ss S;
    color cb_green, ss L+;

snippet centerpi
abbr    centerpi
alias   centerpi
    # Edit the atoms selected for positioning the pseudoatom.;
    pseudoatom pi_cent,/${1:3nd3}/${2:A}/${3:U`15}/cg+cz;
    dist pi_cent////ps1, b/${4:U`15}/${5:aaa};

snippet cribbon
abbr    cribbon
alias   cribbon
    as cartoon;
    color red, ss H;
    color yellow,ss S;
    color green, ss L+;

snippet cspheres
abbr    cspheres
alias   cspheres
    as spheres;
    color gray30, chain ${1:A};
    color white, chain ${2:B};
    color green, name CL;
    color brown, resn NAG;
    color red, resi 381;
    remove solvent;
    set specular, 0;
    set ray_trace_gain, 0;
    set ray_trace_mode, 3;
    bg_color white;
    set ray_trace_color, black;
    set depth_cue,0;

snippet coordinate
abbr    coordinate
alias   coordinate
    viewport 900,600;
    fetch 3nd4, type=pdb, async=0;
    run ~/Scripts/PyMOLScripts/quat.py;
    quat 3nd4;
    show sticks;
    set stick_radius=0.125;
    hide everything, name H*;
    bg_color white;
    create coorCov, (3nd4_1 and (resi 19 or resi 119 or resi 219 or resi 319 or resi 419 or resi 519 or (resi 3 and name N7)));
    bond (coorCov//A/NA`19/NA),(coorCov//A/A`3/N7);
    bond (coorCov//A/NA`19/NA),(coorCov//A/HOH`119/O);
    bond (coorCov//A/NA`19/NA),(coorCov//A/HOH`219/O);
    bond (coorCov//A/NA`19/NA),(coorCov//A/HOH`319/O);
    bond (coorCov//A/NA`19/NA),(coorCov//A/HOH`519/O);
    distance (3nd4_1 and chain Aand resi 19 and name NA), (3nd4_1 and chain A and resi 519);
    distance (3nd4_1 and chain A and resi 19 and name NA), (3nd4_1 and chain A and resi 419);
    distance (3nd4_1 and chain A and resi 19 and name NA), (3nd4_1 and chain A and resi 319);
    distance (3nd4_1 and chain A and resi 19 and name NA), (3nd4_1 and chain A and resi 219);
    show nb_spheres; 
    set nb_spheres_size, .35;
    distance hbond1,/3nd4_1/1/A/HOH`119/O, /3nd4_1/1/A/A`3/OP2;
    distance hbond2,/3nd4_1/1/A/HOH`319/O, /3nd4_1/1/A/A`3/OP2;
    distance hbond3,/3nd4_1/1/A/HOH`91/O,/3nd4_1/1/A/HOH`119/O;
    distance hbond4,/3nd4_1/1/A/G`4/N7,/3nd4_1/1/A/HOH`91/O;
    distance hbond5,/3nd4_1/1/A/G`4/O6, /3nd4_1/1/A/HOH`419/O;
    distance hbond6,/3nd4_1/1/A/HOH`91/O,/3nd4_1/1/A/G`4/OP2;
    distance hbond7,/3nd4_1/1/A/HOH`319/O,/3nd4_1/1/A/G`2/OP2;
    distance  hbond9,/3nd4_1/1/A/HOH`419/O,/3nd4_2/2/A/HOH`74/O;
    distance hbond10,/3nd4_2/2/A/C`15/O2,/3nd4_1/1/A/G`2/N2;
    distance hbond11, /3nd4_2/2/A/C`15/N3,/3nd4_1/1/A/G`2/N1;
    distance hbond12,/3nd4_2/2/A/C`15/N4,/3nd4_1/1/A/G`2/O6;
    distance hbond13, /3nd4_2/2/A/U`14/N3,/3nd4_1/1/A/A`3/N1;
    distance hbond14,3nd4_2/2/A/U`14/O4,/3nd4_1/1/A/A`3/N6;
    distance hbond15, /3nd4_2/2/A/C`13/N4,/3nd4_1/1/A/G`4/O6;
     distance hbond16,/3nd4_2/2/A/C`13/N3, /3nd4_1/1/A/G`4/N1;
    distance hbond17, /3nd4_1/1/A/G`4/N2,/3nd4_2/2/A/C`13/O2;
    distance hbond18,/3nd4_1/1/A/G`2/N2,/3nd4_2/2/A/C`15/O2;
    distance hbond19,/3nd4_1/1/A/HOH`91/O,/3nd4_1/1/A/G`4/OP2;    
    set depth_cue=0;
    set ray_trace_fog=0;
    set dash_color, black;
    set label_font_id, 5;
    set label_size, 36;
    set label_position, (0.5, 1.0, 2.0);
    set label_color, black;
    set dash_gap, 0.2;
    set dash_width, 2.0;
    set dash_length, 0.2;
    set label_color, black;
    set dash_gap, 0.2;
    set dash_width, 2.0;
    set dash_length, 0.2;
    select carbon, element C;
    color yellow, carbon;
    disable carbon;
    set_view(-0.9,0.34,-0.26,0.33,0.18,-0.93,-0.27,-0.92,-0.28,-0.07,-0.23,-27.83,8.63,19.85,13.2,16.0,31.63,-20.0)

snippet distance
abbr    distance
alias   distance
    # Edit the name for the ditance, the selection criteria for atom 1, and the selection criteria for atom 2.;
    distance ${1:dist3}, ${2:/rcsb074137//B/IOD`605/I`B}, ${3:/rcsb074137//B/IOD`605/I`A};

snippet drawHbonds
abbr    drawHbonds
alias   drawHbonds
    hide everything, hydrogens;
    hide labels;
    # set the color of the dashed lines representing the H-bond.;
    set dash_color, ${1:black};
    set dash_gap, 0.4;
    set dash_radius, 0.08;

snippet carvedIsomesh
abbr    carvedIsomesh
alias   carvedIsomesh
    delete all;
    # Fetch the coordinates. Need internet connection.
    fetch ${1:4dgr}, async=0;
    # Fetch the electron density map.
    fetch ${1:4dgr}, type=2fofc,async=0;
    # create a selection out of the glycan
    select ${2:LongGlycan}, resi ${3:469:477};
    orient ${2:LongGlycan};
    remove not ${2:LongGlycan};
    remove name H*;
    isomesh 2fofcmap, ${1:4dgr}_2fofc, 1, ${2:LongGlycan}, carve = 1.8;
    color density, 2fofcmap; 
    show sticks;
    show spheres;
    set stick_radius, .07;
    set sphere_scale, .19;
    set sphere_scale, .13, elem H;
    set bg_rgb=[1, 1, 1];
    set stick_quality, 50;
    set sphere_quality, 4;
    color gray85, elem C;
    color red, elem O;
    color slate, elem N;
    color gray98, elem H;
    set stick_color, gray50;
    set ray_trace_mode, 1;
    set ray_texture, 2;
    set antialias, 3;
    set ambient, 0.5;
    set spec_count, 5;
    set shininess, 50;
    set specular, 1;
    set reflect, .1;
    set dash_gap, 0;
    set dash_color, black;
    set dash_gap, .15;
    set dash_length, .05;
    set dash_round_ends, 0;
    set dash_radius, .05;
    set_view (0.34,-0.72,0.61,0.8,0.56,0.22,-0.51,0.4,0.77,0.0,0.0,-81.31,44.64,-9.02,58.62,65.34,97.28,-20.0);
    preset.ball_and_stick("all",mode=1);
    draw;

snippet fetch2FoFcIsomesh
abbr    fetch2FoFcIsomesh
alias   fetch2FoFcIsomesh
    # Fetch a 2fofc electron density map. Edit the PDB-ID code.;
    fetch ${1:3nd4}, ${1:3nd4}_2fofc, type=2fofc, async=0;
    # Render and display a contour of this map as chicken wire.;
    isomesh 2fofcmap, ${1:3nd4}_2fofc, 1, ${1:3nd4}, carve = 1.8;

snippet fetchCIF
abbr    fetchCIF
alias   fetchCIF
    # Fetch the atomic coordinates as a cif file. Requires internet connection.
    fetch ${1:3nd4}, type=cif, async=0;

snippet fetchFoFc
abbr    fetchFoFc
alias   fetchFoFc
    # fetch 2fofc map. The argument is its object name.;
    fetch ${1:3nd4},  ${1:3nd4}_2fofc, type=fofc, async=0;

snippet filledRing
abbr    filledRing
alias   filledRing
    show sticks;set cartoon_ring_mode, 3;
    set cartoon_ring_finder, 1;
    set cartoon_ladder_mode, 1;
    set cartoon_nucleic_acid_mode, 4;
    set cartoon_ring_transparency, 0.5;
    as cartoon;

snippet getCoordinates
abbr    getCoordinates
alias   getCoordinates
    print cmd.get_atom_coords('${1:/4PCO//B/G`8/OP2}');

snippet hbonddash
abbr    hbonddash
alias   hbonddash
    hide everything, hydrogens;
    hide labels;
    set dash_color, black; 
    set dash_gap, 0.4;
    set dash_radius, 0.08;

snippet hidealtloc
abbr    hidealtloc
alias   hidealtloc
    select altconf, alt ${1:b}  # select B alternative locators;
    hide everything, altconf  # hide alt B locators;

snippet labelResnResi
abbr    labelResnResi
alias   labelResnResi
    label name ca, '%s%s' %(one_letter[${1:resn}],${2:resi});

snippet labelSS
abbr    labelSS
alias   labelSS
    alter ${1:chain A}, ss='${2:helix}';
    label (%2),'%3';

snippet loadPDBbs
abbr    loadPDBbs
alias   loadPDBbs
    fetch ${1:3nd3},name=${1:3nd3}, type=pdb, async=0;
    hide (name H*);
    hide lines;
    show sticks;
    set stick_radius, ${2:1.2};
    set nb_sphere_radius, ${3:0.35};
    orient;

snippet loadPDBnb
abbr    loadPDBnb
alias   loadPDBnb
    fetch ${1:3nd3}, name=${1:3nd3}, type=pdb, async=0;
    orient;
    set stick_radius, ${2:1.2};
    hide (name H*);
    set nb_sphere_size, ${3:0.35};
    set nb_spheres_quality, ${4:1};
    show nb_spheres;

snippet ms
abbr    ms
alias   ms
    fetch ${1:3nd3}, name=${1:3nd3}, type=pdb, async=0;
    select ${2:temp}, ${1:3nd3} and chain ${4:A};
    run ${5:/Users/blaine-mooers/Scripts/PyMOLScripts/msms_pymol.py};
    calc_msms_area ${2:temp};

snippet molscriptRibbon
abbr    molscriptRibbon
alias   molscriptRibbon
    set cartoon_highlight_color, grey;
    show cartoon;
    set cartoon_flat_sheets, 0;
    set cartoon_smooth_loops, 0;
    set cartoon_fancy_helices, 1;

snippet oneLetter
abbr    oneLetter
alias   oneLetter
    one_leVer%={'VAL':'V',%'ILE':'I',%'LEU':'L',%'GLU':'E',%'GLN':'Q','ASP':'D',%
    'ASN':'N',%'HIS':'H',%'TRP':'W',%'PHE':'F',%'TYR':'Y',%'ARG':'R',%'LYS':'K',%
    'SER':'S',%'THR':'T',%'MET':'M',%'ALA':'A',%'GLY':'G',%'PRO':'P',%'CYS':'C'}%

snippet fasta
abbr    fasta
alias   fasta
    print cmd.get_fastastr("all")

snippet pseudolabel
abbr    pseudolabel
alias   pseudolabel
    pseudoatom ${1:forLabel};
    label ${1:forLabel}, '%0';
    set label_color, ${2:red};

snippet rotate
abbr    rotate
alias   rotate
    rotate ${1:x}, ${2:45}, ${3:pept};

snippet stereoDraw
abbr    stereoDraw
alias   stereoDraw
    stereo walleye; 
    set ray_shadow, off; 
    #draw 3200,2000;
    draw ${1:1600,1000}; 
    png ${2:aaa}.png;

snippet stereoRay
abbr    stereoRay
alias   stereoRay
    stereo; 
    set ray_shadow, off;
    ray ${1:2400,1200};
    png ${2:aaa}.png;

snippet loadThreeMaps
abbr    loadThreeMaps
alias   loadThreeMaps
    load ${1:4dgr}.pdb;
    # Make sure to rename map file so that;
    # the root filename differs from pdb root filename;
    load ${1:4dgr}_2fofc.ccp4, 2fofc;
    load ${1:4dgr}_fofc.ccp4, fofc;
    select  ${2:glycan}, resid 200 or (resid 469:477);
    isomesh ${3:mesh1}, 2fofc, 1.0, ${2:glycan};
    color density, ${3:mesh1};
    isomesh ${4:mesh2}, fofc, 3.0, ${2:glycan};
    color green, ${4:mesh2};
    isomesh ${5:mesh3}, fofc, -3.0, ${2:glycan};
    color red, ${5:mesh3};

snippet turnAboutAxis
abbr    turnAboutAxis
alias   turnAboutAxis
    turn ${1:x},${2:90};

snippet volumeRamp
abbr    volumeRamp
alias   volumeRamp
    cmd.volume_ramp_new("ramp_magenta", [0.01, 1.00, 0.00, 1.00, 0.00, 4.01, 1.00, 0.00, 1.00, 0.10, 4.99, 1.00, 0.00, 1.00, 0.50,])

snippet solventRadius
abbr    solventRadius
alias   solventRadius
    set solvent_radius, ${1:1.55};

snippet scaleRadiusColor
abbr    scaleRadiusColor
alias   scaleRadiusColor
    # Use snippets scaleRadiusColorpy and scaleRadiusColorPythonInsertpy for python scripts;
    bg_color white;
    hide everything;
    show spheres;
    set  stick_radius = 0.1;
    hide everything, HET;
    show spheres, HET;
    set sphere_quality=3;
    show sticks, resi ${1:1102};
    from pymol import stored;
    # set the stored array equal to the b−values or use your own values; 
    stored.bb = [ ];
    iterate all, stored.bb.append(b);
    # execute a python−block;
    python;
    # scale the b−values;
    M = max(stored.bb);
    scaledBB = map(lambda x: float (x/M), stored.bb);
    count = 0;
    # set the sphere radii independently;
    #[(cmd.set("sphere_scale", x ,"ID %s"%count); count = count + 1) for x in scaledBB];
    for x in scaledBB:
      cmd.set("sphere_scale", x ,"ID %s"%count)
      count = count + 1
    python end;
    spectrum b, selection=${2:4gdx};
    space cmyk;
    set specular_intensity , 0.25;

snippet rv
abbr    rv
alias   rv
    run roundview.py;

snippet spng
abbr    spng
alias   spng
    python;
    import datetime;
    from pymol import cmd; 
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT); 
    cmd.save(stemName+s+".png"); 
    python end;

snippet spse
abbr    spse
alias   spse
    python;
    import datetime;
    from pymol import cmd; 
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT); 
    cmd.save(stemName+s+".pse"); 
    python end;

snippet sc222
abbr    sc222
alias   sc222
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 2, 2, 2, , ${2:orange},  ${3:supercell1}, 1;

snippet pearl
abbr    pearl
alias   pearl
    create ${1:sodium2}, ${2:sodium1};
    set sphere_transparency, 0.4, ${1:sodium2};
    set sphere_scale, 1.05, ${1:sodium2};
    ray;

snippet fog
abbr    fog
alias   fog
    set fog, 0;

snippet rmwater
abbr    rmwater
alias   rmwater
    remove resn HOH;

snippet setcolor
abbr    setcolor
alias   setcolor
    set_color ${1:bark}, [${2:0.1, ${3:0.1}, ${4:0.1}];
    color ${1:bark}, ${5:protein};

snippet duplicateObject
abbr    duplicateObject
alias   duplicateObject
    # Create an object with the first argument using the selection which is the second argument.;
    create ${1:t4l}, ${2:1lw9};

snippet selectChain
abbr    selectChain
alias   selectChain
    select ${1:rna}, ${2:chain B};

snippet selectResidues
abbr    selectResidues
alias   selectResidues
    select aromatic, resn phe+tyr+trp;

snippet selectResi
abbr    selectResi
alias   selectResi
    select ${!:se}; resi ${2: 1:100};

snippet selectElement
abbr    selectElement
alias   selectElement
    select ${1:oxygen}, elem ${2:O};

snippet selectName
abbr    selectName
alias   selectName
    select ${1:oxygen2}, name ${2:O2};

snippet selectHelices
abbr    selectHelices
alias   selectHelices
    select ${1:helices}, ss h; 

snippet selectStrands
abbr    selectStrands
alias   selectStrands
    select ${1:strands}, ss s; 

snippet selectLoops
abbr    selectLoops
alias   selectLoops
    select ${1:loops}, ss l;

snippet selectAllBut
abbr    selectAllBut
alias   selectAllBut
    select ${1:select1}, elem ${2:N} and chain ${3:A} and not resn ${4:LYS};

snippet selectAtomsAround
abbr    selectAtomsAround
alias   selectAtomsAround
    select ${1:nearby}, resn ${2:drug} around ${3:5};

snippet selectResiduesAround
abbr    selectResiduesAround
alias   selectResiduesAround
    select ${1:nearby}, br. resn ${2:drug} around ${3:5};

snippet undoSelection
abbr    undoSelection
alias   undoSelection
    disable ${1:sele}; 

snippet loadPDBfile
abbr    loadPDBfile
alias   loadPDBfile
    # Load into pymol a pdb file in the current directory.
    load ${1:my}.pdb;

snippet savePNG
abbr    savePNG
alias   savePNG
    # PyMOL writes out only png files. 
    # This may need to be converted to tiff.
    # See the png2tiff snippet for a bash script that converts all png files in a folder into tiff files.
    # 1: png filename
    # 2: x-dimension in pixels
    # 3: y-dimension in pixels, 1600 x 1000 approximates the golden ratio. Usually want a square for multipanel figures.
    # 4: dots per inch, 
    # 5: ray tracing off, 0; ray tracing on, 1
    # should also consider image without ray tracing shadows. 
    png ${1:saveMe}.png, ${2:1920}, ${3:1920}, ${4:600}, ${5:1};

snippet ringMode
abbr    ringMode
alias   ringMode
    show cartoon, ${1:rna}; set cartoon_ring_mode, ${2:3};

snippet sidehChainHelper
abbr    sidehChainHelper
alias   sidehChainHelper
    set cartoon_side_chain_helper, on;

snippet extractPartObj
abbr    extractPartObj
alias   extractPartObj
    extract new_obj, chain A;

snippet puttyCartoon
abbr    puttyCartoon
alias   puttyCartoon
    show cartoon;
    cartoon putty;
    set cartoon_smooth_loops, 0;
    # The command below may be needed if the above setting does not work.
    # This can happen if using the presets.
    # unset cartoon_smooth_loops; 
    set cartoon_flat_sheets, 0;
    # The command below may be needed if the above setting does not work.
    # This can happen if using the presets.
    # unset cartoon_smooth_loops; 
    set cartoon_smooth_loops,0;
    # The command below may be needed if the above setting does not work.
    # This can happen if using the presets.
    ## unset cartoon_smooth_loops;

snippet hideSelection
abbr    hideSelection
alias   hideSelection
    indicate none

snippet discreteCartoonColoring
abbr    discreteCartoonColoring
alias   discreteCartoonColoring
    set cartoon_discrete_colors, on;

snippet sc111
abbr    sc111
alias   sc111
    # 1: change to your path to supercell.py.
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 1, 1, , ${2:orange},  ${3:supercell1}, 1;

snippet saxsEnvelope
abbr    saxsEnvelope
alias   saxsEnvelope
    # 1: enter the name of the bead model object;
    alter ${1:refine_A_Ave_SM_015_0_370-374-0r}, vdw=3.0;
    set solvent_radius = 3.0;

snippet setpath
abbr    setpath
alias   setpath
    os.environ["PATH"] += os.pathsep +${1: '/Applications/ATSAS/bin'};

snippet fetchPath
abbr    fetchPath
alias   fetchPath
    set fetch_path, ${1:/Users/blaine/pdbFiles};

snippet antialias
abbr    antialias
alias   antialias
    set antialias, 1;

snippet lspymolrc
abbr    lspymolrc
alias   lspymolrc
    print invocation.options.deferred;

snippet sigDigits
abbr    sigDigits
alias   sigDigits
    set label_distance_digits, ${1:2};
    set label_angle_digits, ${2:2};

snippet labelCAs
abbr    labelCAs
alias   labelCAs
    label name CA,"%s%s" % (resn,resi);

snippet labelWatersHOH
abbr    labelWatersHOH
alias   labelWatersHOH
    label resn HOH ,"%s%s" % (resn,resi);

snippet labelWatersW
abbr    labelWatersW
alias   labelWatersW
    label resn HOH ,"W%s" % (resi);

snippet findHbonds
abbr    findHbonds
alias   findHbonds
    remove element h; distance hbonds, all, all, 3.2, mode=2;

snippet printBs
abbr    printBs
alias   printBs
    remove element h; iterate resi ${1: 1:13}, print(resi, name,b);

snippet labelMainChain
abbr    labelMainChain
alias   labelMainChain
    label name n+c+o+ca,"%s%s%s" % (resn,resi,name);

snippet printBspartB
abbr    printBspartB
alias   printBspartB
    iterate resi ${1:38} and altloc ${2:B}, print resi, name, alt, b;

snippet printBs2digits
abbr    printBs2digits
alias   printBs2digits
    iterate (resi ${1:133}), print(name + " %.2f" % b);

snippet writeCommandReference2HTML
abbr    writeCommandReference2HTML
alias   writeCommandReference2HTML
    cmd.write_html_ref('pymol-command-ref.html');

snippet averageB
abbr    averageB
alias   averageB
    # Uses a regular list as opposed to PyMOL's stored list. Edit the selection as needed.;
    Bfactors = []; 
    #  >>> edit the selection below, which is a range of residue numbers here.;
    iterate (resi ${1:133}), Bfactors.append(b);
    print("Sum = ", "%.2f" % (sum(Bfactors)));
    print("Number of atoms = ", len(Bfactors));
    print( 'Average B =' , "%.2f" % ( sum(Bfactors)/float(len(Bfactors))));

snippet aveB4resiX
abbr    aveB4resiX
alias   aveB4resiX
    # AveBResiX, prints the resiude number and the average bfactor.;
    # Uses reduce and lambda, builtin Python functional porgramming functions.;
    # Note that you need to convert the length of the list of Bfactors from an integer to a float before division into the sum.; 
    Bfactors = [];
    # edit the selection below, which is a range of residue numbers here.;
    iterate (resi ${1:133}), Bfactors.append(b);
    print( "Average B-factor of residue ", %{1:133} , "   = ", "%.2f" %(reduce(lambda x, y: x + y, Bfactors) / float(len(Bfactors))) );

snippet printNameB4ResiX
abbr    printNameB4ResiX
alias   printNameB4ResiX
    Bfac_dict = { 'Bfactors3' : [] };cmd.iterate("(${1:resi 133})","Bfactors3.append((name, b))", space=Bfac_dict); for i,j in Bfac_dict['Bfactors3']: print("%s %.2f" % (i,j));

snippet printResiResnNameB4ResiX
abbr    printResiResnNameB4ResiX
alias   printResiResnNameB4ResiX
    Bfac_dict = { 'Bfactors3' : [] };cmd.iterate("(${1:resi 133})","Bfactors3.append((resn,resi,name, b))", space=Bfac_dict); for i,j,k,l in Bfac_dict['Bfactors3']: print("%s %s %s %.2f" % (i,j,k,l));

snippet printResiResnNameB4ResiXNoH
abbr    printResiResnNameB4ResiXNoH
alias   printResiResnNameB4ResiXNoH
    Bfac_dict = { 'Bfactors3' : [] };cmd.iterate("(${1:resi 133} and not elem H)","Bfactors3.append((resn,resi,name, b))", space=Bfac_dict); for i,j,k,l in Bfac_dict['Bfactors3']: print("%s %s %s %.2f" % (i,j,k,l));

snippet internalGUImode2
abbr    internalGUImode2
alias   internalGUImode2
    internal_gui_mode=2;

snippet internalGUIwidth
abbr    internalGUIwidth
alias   internalGUIwidth
    # set to 0 to make the internal gui vanish;
    set internal_gui_width=${1:0};

snippet printDoc
abbr    printDoc
alias   printDoc
    print ${1:my_func}.__doc__;

snippet lsSnips
abbr    lsSnips
alias   lsSnips
    """Tab trigger                  Description
    ---------------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------
    antialias                    Set antialias to get smooth edges
    ao                           Ambient occlussion.
    aveB4resiX                   AveBResiX, prints the resiude number and the average bfactor.
                                 Uses reduce and lambda, builtin Python functional porgramming functions.
                                 Note that you need to convert the length of the list of Bfactors from an integer to a float before division into the sum.
    averageB                     Uses a regular list as opposed to PyMOL's stored list. Edit the selection as needed.
    bs                           Ball and stick representation.
    bu                           Biological unit.
    carvedDensity                Carved electron density.
    cblind                       Color blindness.
    centerpi                     Center pi.
    coordinate                   Coordinate covalent bonds to metals and H-bonds friom RNA.
    cribbon                      Color ribbon H red, strand yellow, loop green.
    cspheres                     Colored spheres.
    discreteCartoonColoring      Turn on discrete colors between secondary structure elements.
    distance                     H-bond distances.
    doubleBond                   Valence bond.
    drawHbonds                   Draw H-bonds.
    duplicateObject              Duplicate object.
    ellipcol                     Set ellipsoid color.
    extractPartObj               Create a new object from part of an existing object.
    fasta                        Print Fasta from PDB file.
    fetch2FoFc                   Fetch 2FoFc map.
    fetchCIF                     Fetch cif file.
    fetchFoFc                    Fetch fofc map.
    fetchPath                    Set path for location to save fetched pdb files.
    filledRing                   Filled rings in nucleic acids.
    findHbonds                   Find hbonds around a residue.
    fog                          Blur the background atoms.
    getCoordinates               Get coordinates.
    hbond                        Hbond setup.
    hbonddash                    H-bond dashes.
    hideSelection                Trun off magenta squares on current selection.
    hidealtloc                   Hide alt loc.
    internalGUImode2             Makes the background of the internal gui transparent with the viewport extended into this region of the gui. This may be a useful mode for workshops.
    internalGUIwidth             Set the width of the internal gui.
    labelCAs                     Label the CA atoms with the Ala333 style format
    labelMainChain               Label the main chain atoms by resn,resi,atom name.
    labelResnResi                Label CA atom with residue name and residue number.
    labelSS                      Label SS.
    labelWatersHOH               Label waters HOH.
    labelWatersW                 Label waters W.
    loadPDBbs                    Load PDB ball-and-stick.
    loadPDBfile                  Load a pdb file in the current directory.
    loadPDBnb                    Load PDB nb spheres.
    lsSnips                      List all snips by tab trigger and description
    lspymolrc                    Print list of active pymolrc files.
    molscriptRibbon              Molscript ribbons.
    ms                           Measure surface area.
    oneLetter                    One letter amino acid.
    pearl                        The pearl effect is made with two spheres with the outer sphere being transparent.
    printBs                      Print the B-factors of a residue.
    printBs2digits               Print B-values for a residue with the B's rounded off to two decimal places.
    printBspartB                 Print B factors of part B of a rsidues.
    printDoc                     Print document string of a function.
    printNameB4ResiX             Print name and b-factor for a rsidue. You can change this to a named selection or a residue range ( e.g., resi 133:155). Use the noH variant if H atoms are present.
    printResiResnNameB4ResiX     Print resn, resi, atom name, and b-factor.
    printResiResnNameB4ResiXNoH  Print name and b-factor for a rsidue. You can change this to a named selection or a residue range ( e.g., resi 133:155). The noH variant.
    pseudolabel                  Position label with pseudoatom.
    puttyCartoon                 Create a putty cartoon.
    ringMode                     Set the ring mode to a value between 0  and 6 in cartoons of nucleic acids.
    rmwater                      Remove waters from molecular object.
    rotate                       Rotate about axis.
    rv                           Return settings in rounded format.
    savePNG                      Save a png file of current scene to the current directory.
    saxsEnvelope                 Display SAXS envelope
    sc111                        Display all symmetry mates in one unit cell. Asumes supercell.py (sse PyMOL Wiki) is in $HOME/Scripts/PyMOLscripts/.
    sc222                        Run Tom Holder's supercell script to generate three cells in all directions.
    scaleRadiusColor             Scale the radius and color of atoms as spheres by property in the B-value column.
    selectAllBut                 Select all nitrogen atom in a selelction except from lysine.
    selectAtomsAround            Select atoms within a radius around a ligand.
    selectChain                  Select a chain.
    selectElement                Select atoms by elemnt.
    selectHelices                Select atoms by alpha helices.
    selectLoops                  Select atoms by beta loops.
    selectName                   Select atoms by name.
    selectResi                   Select residues by a range of numbers.
    selectResidues               Select residues by name.
    selectResiduesAround         Select residues within a radius around a ligand.
    selectStrands                Select atoms by beta strands.
    setcolor                     Set color name to a RGB code.
    setpath                      Set additional path for PyMOL to search on startup
    sidehChainHelper             In cartoons, hide the backbone atoms of selected residues when showing then as sticks.
    sigDigits                    Set number of decimals places to show in distance labels.
    sigang                       Set angle labels to display 2 decimals places
    sigdist                      set distance labels to display 2 decimals
    solventRadius                Set radius of ball used to make solvent accessible surface.
    spng                         Save png flle with timestamp
    spse                         Save pse flle with timestamp
    stack                        Base-stacking figure.
    stereoDraw                   Stereo draw.
    stereoRay                    Stereo ray.
    threeMaps                    Three electron density.
    turnAboutAxis                Turn about axis.
    undoSelection                Undo a selection.
    volumeRamp                   Volume ramp.
    writeCommandReference2HTML   Write the command reference to html file in the present working directory."""

snippet his31asp70
abbr    his31asp70
alias   his31asp70
    fetch ${1:1lw9}, async=0; 
    zoom (${2:resi 31 or resi 70}); 
    preset.technical(selection='all'); 
    bg_color ${3:gray70}; 
    clip slab, 7,(${4:resi 31 or resi 70});
    rock;

snippet waterTriple
abbr    waterTriple
alias   waterTriple
    fetch ${1:lw9}, async=0; 
    # zoom in on the selection. Edit by chaning the residue number.
    zoom resi ${2:313}; 
    preset.technical(selection='all', mode=1);

snippet ligandSelect
abbr    ligandSelect
alias   ligandSelect
    select ${1:ligand}, organic;

snippet github
abbr    github
alias   github
    https://github.com/MooersLab/pymolsnips/blob/master/README.md

snippet sigdihedral
abbr    sigdihedral
alias   sigdihedral
    set label_dihedral_digits, ${1:2};

snippet stateOne
abbr    stateOne
alias   stateOne
    cmd.create('newobject', 'oldobject', '1', '1');

snippet sc112
abbr    sc112
alias   sc112
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 1, 2, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc113
abbr    sc113
alias   sc113
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 1, 3, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc311
abbr    sc311
alias   sc311
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 3, 1, 1, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc131
abbr    sc131
alias   sc131
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 3, 1, , ${2:orange},  ${3:supercell1}, 1;

snippet sc211
abbr    sc211
alias   sc211
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 2, 1, 1, , ${2:orange},  ${3:supercell1}, 1;

snippet sc121
abbr    sc121
alias   sc121
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 2, 1, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc122
abbr    sc122
alias   sc122
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 2, 2, , ${2:orange},  ${3:supercell1}, 1;

snippet sc221
abbr    sc221
alias   sc221
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 2, 2, 1, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc212
abbr    sc212
alias   sc212
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 2, 1, 2, , ${2:orange},  ${3:supercell1}, 1;

snippet sc133
abbr    sc133
alias   sc133
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 3, 3, , ${2:orange},  ${3:supercell1}, 1;

snippet sc313
abbr    sc313
alias   sc313
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 3, 1, 3, , ${2:orange},  ${3:supercell1}, 1;

snippet sc331
abbr    sc331
alias   sc331
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 3, 3, 1, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc233
abbr    sc233
alias   sc233
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 2, 3, 3, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc323
abbr    sc323
alias   sc323
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 1, 1, , ${2:orange},  ${3:supercell1}, 1;

snippet sc332
abbr    sc332
alias   sc332
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 3, 3, 2, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc333
abbr    sc333
alias   sc333
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 3, 3, 3, , ${2:orange},  ${3:supercell1}, 1;

snippet sc114
abbr    sc114
alias   sc114
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 1, 4, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc141
abbr    sc141
alias   sc141
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 4, 1, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc411
abbr    sc411
alias   sc411
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 4, 1, 1, ,  ${2:orange},  ${3:supercell1}, 1;

snippet saln
abbr    saln
alias   saln
    python;
    import datetime;
    from pymol import cmd;
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT);
    cmd.save(stemName+s+".aln");
    python end;

snippet sccp4
abbr    sccp4
alias   sccp4
    python;
    import datetime;
    from pymol import cmd; 
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT); 
    cmd.save(stemName+s+".ccp4"); 
    python end;

snippet sdae
abbr    sdae
alias   sdae
    import datetime;
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT); 
    cmd.save(stemName+s+".dae"); 

snippet carvedIsosurface
abbr    carvedIsosurface
alias   carvedIsosurface
    delete all;
    # Fetch the coordinates. Need internet connection.;
    fetch ${1:4dgr}, async=0;
    # Fetch the electron density map.;
    fetch ${1:4dgr}, type=2fofc,async=0;
    # create a selection out of the glycan;
    select ${2:LongGlycan}, resi ${3:469:477};
    orient ${2:LongGlycan};
    remove not ${2:LongGlycan};
    remove name H*;
    isosurface 2fofcmap, ${1:4dgr}_2fofc, 1, ${2:LongGlycan}, carve = 1.8;
    color density, 2fofcmap; 
    show sticks;
    show spheres;
    set stick_radius, .07;
    set sphere_scale, .19;
    set sphere_scale, .13, elem H;
    set bg_rgb=[1, 1, 1];
    set stick_quality, 50;
    set sphere_quality, 4;
    color gray85, elem C;
    color red, elem O;
    color slate, elem N;
    color gray98, elem H;
    set stick_color, gray50;
    set ray_trace_mode, 1;
    set ray_texture, 2;
    set antialias, 3;
    set ambient, 0.5;
    set spec_count, 5;
    set shininess, 50;
    set specular, 1;
    set reflect, .1;
    set dash_gap, 0;
    set dash_color, black;
    set dash_gap, .15;
    set dash_length, .05;
    set dash_round_ends, 0;
    set dash_radius, .05;
    set_view (0.34,-0.72,0.61,0.8,0.56,0.22,-0.51,0.4,0.77,0.0,0.0,-81.31,44.64,-9.02,58.62,65.34,97.28,-20.0);
    preset.ball_and_stick("all",mode=1);
    draw;

snippet fetch2FoFcIsosurface
abbr    fetch2FoFcIsosurface
alias   fetch2FoFcIsosurface
    # Fetch a 2fofc electron density map. Edit the PDB-ID code. Use lowercase letter to select a single chain.;
    fetch ${1:3nd4}, ${1:3nd4}_2fofc, type=2fofc, async=0;
    # Render and display a contour of this map as a chicken wire representation.;
    isosurface 2fofcmap, ${1:3nd4}_2fofc, 1, ${1:3nd4}, carve = 1.8;

snippet threeMapsIsosurface
abbr    threeMapsIsosurface
alias   threeMapsIsosurface
    load ${1:4dgr}.pdb;
    # Make sure to rename map file so that ;
    # the root filename differs from pdb root filename;
    load ${1:4dgr}_2fofc.ccp4, 2fofc;
    load ${1:4dgr}_fofc.ccp4, fofc;
    select  ${2:glycan}, ${3:resid 200 or (resid 469:477)};
    isosurface ${4:mesh1}, 2fofc, 1.0, ${2:glycan};
    color density, ${4:mesh1};
    isosurface  ${5:mesh2}, fofc, 3.0, ${2:glycan};
    color green, ${5:mesh2};
    isosurface  ${6:mesh3}, fofc, -3.0, ${2:glycan};
    color red, ${6:mesh3};

snippet carvedVolume
abbr    carvedVolume
alias   carvedVolume
    delete all;
    # Fetch the coordinates. Need internet connection.;
    fetch ${1:4dgr}, async=0;
    # Fetch the electron density map.;
    fetch ${1:4dgr}, type=2fofc,async=0;
    # create a selection out of the glycan;
    select ${2:LongGlycan}, resi ${3:469:477};
    # oreint the long axes of the object along the x-axis;
    orient ${2:LongGlycan};
    # remove everything except the glycan;
    remove not ${2:LongGlycan};
    # remove the remaining hydrogen atoms;
    remove name H*;
    # show the electron density map as a surface.
    surface 2fofcmap, ${1:4dgr}_2fofc, 1, ${2:LongGlycan}, carve = 1.8;
    color density, 2fofcmap; 
    show sticks;
    show spheres;
    set stick_radius, .07;
    set sphere_scale, .19;
    set sphere_scale, .13, elem H;
    set bg_rgb=[1, 1, 1];
    set stick_quality, 50;
    # make the spheres smooth with larger settings.;
    set sphere_quality, 4;
    # gray85 is off-white, gray0 is black;
    color gray85, elem C;
    color red, elem O;
    color slate, elem N;
    color gray98, elem H;
    set stick_color, gray50;
    set ray_trace_mode, 1;
    set ray_texture, 2;
    set antialias, 3;
    set ambient, 0.5;
    set spec_count, 5;
    set shininess, 50;
    set specular, 1;
    set reflect, .1;
    set dash_gap, 0;
    set dash_color, black;
    set dash_gap, .15;
    set dash_length, .05;
    set dash_round_ends, 0;
    set dash_radius, .05;
    set_view (0.34,-0.72,0.61,0.8,0.56,0.22,-0.51,0.4,0.77,0.0,0.0,-81.31,44.64,-9.02,58.62,65.34,97.28,-20.0);
    preset.ball_and_stick("all",mode=1);
    draw;

snippet fetch2FoFcVolume
abbr    fetch2FoFcVolume
alias   fetch2FoFcVolume
    fetch ${1:3nd4}, type=cif, async=0;
    fetch ${1:3nd4}, {1:3nd4}_2fofc, type=2fofc, async=0;
    # Render and display a contour of this map as a volume around a selection called LongGlycan.;
    volume 2fofcmap, ${1:3nd4}_2fofc, 1, ${2:LongGlycan}, carve = 1.8;

snippet threeMapsVolume
abbr    threeMapsVolume
alias   threeMapsVolume
    load ${1:4dgr}.pdb;
    # Make sure to rename map file so that ;
    # the root filename differs from pdb root filename;
    load ${1:4dgr}_2fofc.ccp4, 2fofc;
    load ${1:4dgr}_fofc.ccp4, fofc;
    select  ${2:glycan}, ${3:resid 200 or (resid 469:477)};
    volume ${4:mesh1}, 2fofc, 1.0, ${2:glycan};
    color density, ${4:mesh1};
    volume ${5:mesh2}, fofc, 3.0, ${2:glycan};
    color green, ${5:mesh2};
    volume ${6:mesh3}, fofc, -3.0, ${2:glycan};
    color red, ${6:mesh3};

snippet rvi
abbr    rvi
alias   rvi
    def rvj(StoredView=0, decimal_places=2, outname="roundedview.txt"):
        """
        rvj() is a modification of the the rv() function (aka the roundview.py) 
        so that it can run in Jupyter notebooks with the ipymol.viewer. 
        A set_view string is printed to the noteobook in a format that is ready 
        for reuse. 
        
        The ipymol module was developed by Carlos Hernandez:
        
        https://github.com/cxhernandez/ipymol
        
        The pre-requisites for installing ipymol are as follows:
        
        1. Make a jupyter notebook kernel for Python interpreter inside of 
           the Schrodinger PyMOL. See the PyMOL Snippets GitHub Page for 
           a description of how to make one.
        2. Install the following build of ipymol at the PyMOL prompt.
           You need to log into your GitHub account first.
        
        pip install git+pip install git+https://github.com/cxhernandez/ipymol.git@2a30d6ec1588434e6f0f72a1d572444f89ff535b
        
        3. Make a bash alias to this PyMOL app file.
        
        4. Launch the jupyter notebook and select the pymol.python kernel.
        
        5. Open a terminal instance from the File pulldown in jupyter notebook.
        
        6. Enter `pymol -Rq` to launch an interactive instance of PyMOL.
        
        7. Enter the following code to load ipymol and conmect to PyMOL
        
        from ipymol import viewer as ipv
        ipv.start()   # Start PyMOL RPC server
        
        Now you can change the scene manually and send the display as static 
        image to a cell in the jupyter notebook.
        
        It is assumed that the viewer class of the ipymol moduel has been 
        imported as ipv. 
        
        I made the following modifications of roundview.py.
        The cmd.get_view was replaced with ipv.get_view.
        The cmd.extend was replaced with ipv.extend.
        The myRoundedList was returned for further processing.
        
        MIT License
        
        Copyright:
        Blaine Mooers and the OU Board of Regents
        Uniersity of Oklahoma Health Sciences Center
        Oklahoma City, OK 73104
        
        29 April 2020
        
        """
        
     
        StoredView = int(StoredView)
        decimal_places = int(decimal_places)
     
        #call the get_view function
     
        m = ipv.get_view(StoredView)
     
     
        #Make a list of the elements in the orientation matrix.
     
        myList = [m[0], m[1], m[2], m[3], m[4], m[5], m[6],m[7], m[8], m[9],
                  m[10], m[11], m[12], m[13], m[14],m[15], m[16], m[17]]
     
        #Round off the matrix elements to two decimal places (two fractional places)
        #This rounding approach solved the problem of unwanted
        #whitespaces when I tried to use a string format statement
     
        myRoundedList = [round(elem, decimal_places) for elem in myList]
        
        #x is the string template for the output. The whitespace is required
        #between the "set_view" and "("
     
        x = 'set_view ({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17});'
     
        # Print to the command history window.
        print(x.format(*myRoundedList))
     
        #Write to a text file.
        myFile = open("roundedview.txt", "a")
        myFile.write(x.format(*myRoundedList) + "")
        myFile.close()
        return myRoundedList
    ipv.extend("rv", rv)

snippet rdkrpcChem
abbr    rdkrpcChem
alias   rdkrpcChem
    import os;
    import rdkit;
    from rdkit import Chem;
    from rdkit.Chem import AllChem;
    from rdkit.Chem import PyMol;
    
    s = PyMOL.MolViewer();
    mol = Chem.MolFromSmiles('${1:CCOCCn1c(C2CC[NH+](CCc3ccc(C(C)(C)C(=O)[O-])cc3)CC2)nc2ccccc21}');
    mol = AllChem.AddHs(mol);
    AllChem.EmbedMolecule(mol);
    AllChem.MMFFOptimizeMolecule(mol);
    s.ShowMol(mol, name = '${2:bilastine}', showOnly = False);
    s.Zoom('${2:bilastine}');
    s.SetDisplayStyle('${2:bilastine}', 'sticks');
    s.GetPNG(preDelay=5);

snippet kernel
abbr    kernel
alias   kernel
    framerule=2pt,
    framesep=2mm,
    framesep=2mm,
    breaklines=True,
    baselinestretch=1.2
    ]{bash}
    {
     "argv": [
      "/Applications/PyMOL.app/Contents/bin/python",
      "-m",
      "ipykernel_launcher",
      "-f",
      "{connection_file}"
     ],
     "display_name": "pymol.python",
     "language": "python"
    }

snippet rdkrpcProtein
abbr    rdkrpcProtein
alias   rdkrpcProtein
    from rdkit.Chem import PyMol;
    
    Usage=""""Start pymol from command line with -R flag.
    Select the pymol.python kernel in Jupyter notebook. """;
    
    s = PyMol.MolViewer();
    du = s.server.do;
    du('rein; bg_color white; fetch ${1:1lw9}, type=pdb, async=0, show;nb_spheres;set_view (${2:0.46,-0.28,-0.84,0.74,-0.41,0.54,-0.49,-0.87,0.02,0.0,0.0,-155.16,35.13,11.48,9.72,122.33,187.99,-20.0});');
    s.GetPNG(preDelay=3);
    du('png ${3:T4L600dpi}.png, dpi=600');

snippet ipymolStart
abbr    ipymolStart
alias   ipymolStart
    # Start pymol in terminal with pymol -R;
    # Select pymol.python as kernel in juptyer;
    from ipymol import viewer as ipv;
    ipv.start() # Start PyMOL RPC server;

snippet ipymolProtein
abbr    ipymolProtein
alias   ipymolProtein
    # Create a kernel for PyMOL's python interpreter inside Jupyter;
    # See the kernel snippet for an example.;
    # See the README.md file on pymolsnips GItHub website;
    # https://github.com/MooersLab/pymilsnips;
    # for more details.;
    # Start pymol in terminal with pymol -R;
    # Select pymol.python as kernel in juptyer;
    from ipymol import viewer as ipv;
    # Start PyMOL RPC server;
    ipv.start(); 
    ipv.do('fetch ${1:1lw9}');
    ipv.do('rv');
    # The double parentheses are required when set_view is run this way.;
    ipv.set_view((-0.13,-0.4,-0.91,0.89,-0.45,0.07,-0.44,-0.8,0.41,0.0,0.0,-182.47,35.13,11.48,9.72,149.64,215.3,-20.0));
    ipv.do('AOD');
    ipv.png('${2:testipymolT4L}.png');

snippet rvr
abbr    rvr
alias   rvr
    def rvr(StoredView=0, decimal_places=2, outname="roundedview.txt"):
       """MIT License
        Copyright:
        Blaine Mooers and the OU Board of Regents
        University of Oklahoma Health Sciences Center
        Oklahoma City, OK 73104
        30 April 2020
        
        First run the following:
        
        from rdkit.Chem import PyMol
        s = PyMol.MolViewer()
        du = s.server.do
    
        """
        StoredView = int(StoredView) decimal_places = int(decimal_places)
        #call the get_view function
        m = s.get_view(StoredView)
        #Make a list of the elements in the orientation matrix.
        myList = [m[0], m[1], m[2], m[3], m[4], m[5], m[6],m[7], m[8], m[9], 
                  m[10], m[11], m[12], m[13], m[14],m[15], m[16], m[17]]
        #Round off the matrix elements to two decimal places (two fractional places)
        #This rounding approach solved the problem of unwanted
        #whitespaces when I tried to use a string format statement
        myRoundedList = [round(elem, decimal_places) for elem in myList]
        #x is the string template for the output. The whitespace is required
        #between the "set_view" and "("
        x = 'set_view ({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17});'
        # Print to the command history window.
        print(x.format(*myRoundedList))
        #Write to a text file.
        myFile = open("roundedview.txt", "a") myFile.write(x.format(*myRoundedList) + "") myFile.close()
        return myRoundedList
    du.extend("rvr", rvr)

snippet cmddocs
abbr    cmddocs
alias   cmddocs
    [help(i) for i in dir(cmd)];

snippet pymoldocs
abbr    pymoldocs
alias   pymoldocs
    [help(i) for i in dir(pymol)];

snippet numResiProtein
abbr    numResiProtein
alias   numResiProtein
    sel = 'polymer.protein'; print(len(set([(i.chain, i.resi, i.resn) for i in cmd.get_model(sel).atom])));

snippet numResiProteinChainA
abbr    numResiProteinChainA
alias   numResiProteinChainA
    sel = '${1:chain A} and polymer.protein'; print(len(set([(i.chain, i.resi, i.resn) for i in cmd.get_model(sel).atom])));

snippet numResiNucleic
abbr    numResiNucleic
alias   numResiNucleic
    sel = 'polymer.nucleic'; print(len(set([(i.resi, i.resn) for i in cmd.get_model(sel).atom])));

snippet numResiNucleicChainA
abbr    numResiNucleicChainA
alias   numResiNucleicChainA
    sel = '${1:chain A} and polymer.nucleic'; print(len(set([(i.resi, i.resn) for i in cmd.get_model(sel).atom])));

snippet brokenNucleicBackbone
abbr    brokenNucleicBackbone
alias   brokenNucleicBackbone
    #  >>> edit the selections below, which are ranges of residue numbers and edit the molecular object name (5fur).;
    [cmd.bond(f"/${1:5fur}//${2:E}/{i}/O3'", f"/${1:5fur}//${2:E}/{i+1}/P") for i in range(${5:1}, ${6:80})]; 
    [cmd.bond(f"/${1:5fur}//${2:F}/{i}/O3'", f"/${1:5fur}//${2:F}/{i+1}/P") for i in range(${7:81}, ${8:160})];

snippet oneBondThicknessColor
abbr    oneBondThicknessColor
alias   oneBondThicknessColor
    # To change stick color and radius for the bond between atom 2 and 3;
    set_bond stick_color, ${1:yellow}, index 2, index 3;
    set_bond stick_radius, ${2:0.2}, index 2, index 3;

snippet drawLinks
abbr    drawLinks
alias   drawLinks
    # Requires draw_links.py http://pldserver1.biochem.queensu.ca/~rlc/work/pymol/draw_links.py by Robert Campbell;
    # To connect the alpha carbons of residue 1 with 10, 6 with 16, 7  with 17 and 8 with 18.;
    draw_links ${1:mol1} & chain ${2:A} & name  ${3:CA} & resi ${4:1+6+7+8}, ${5:mol1} & chain ${6:A}& name ${7:CA} & resi ${8:10+16+17+18};

snippet printPath
abbr    printPath
alias   printPath
    # Print the path to the current used PyMOL binary.
    print pymol.__path__

snippet setLigandValenceOn
abbr    setLigandValenceOn
alias   setLigandValenceOn
    #Set on the valence of the ligand only;
    set valence, on, resn ${1:RZS}; set valence, off, not resn ${2:RZS};

snippet presetDocs
abbr    presetDocs
alias   presetDocs
    help(preset)

snippet helpDocs
abbr    helpDocs
alias   helpDocs
    help(help)

snippet loadAmberTrajs
abbr    loadAmberTrajs
alias   loadAmberTrajs
    load ${1:file}.top, ${2:protein};
    load ${1:file}.rst, ${2:protein};

snippet saveSeppy
abbr    saveSeppy
alias   saveSeppy
    from pymol import cmd
    import glob
    import re
    
    def saveSep(prefix=''):
      """
      save_sep <prefix>
    
      saves multiple objects into multiple files using an optional prefix name.
    
      e.g. save_sep prefix
      """
      obj_list = cmd.get_names("all")
    
      if obj_list:
        for i in range(len(obj_list)):
          obj_name = "%s%s.pdb" % (prefix, obj_list[i])
          cmd.save(obj_name, obj_list[i])
          print("Saving %s" %  obj_name)
      else:
        print("No objects found")
        
    cmd.extend('saveSep',saveSep)

snippet optAlignRNA
abbr    optAlignRNA
alias   optAlignRNA
    #!python
     
    ##############################################################################
    #
    # @SUMMARY: -- QKabsch.py.  A python implementation of the optimal superposition
    #     of two sets of vectors as proposed by Kabsch 1976 & 1978.
    #
    # @AUTHOR: Jason Vertrees
    # @COPYRIGHT: Jason Vertrees (C), 2005-2007
    # @LICENSE: Released under GPL:
    # This program is free software; you can redistribute it and/or modify
    #    it under the terms of the GNU General Public License as published by
    #    the Free Software Foundation; either version 2 of the License, or
    #    (at your option) any later version.
    # This program is distributed in the hope that it will be useful, but WITHOUT
    # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    # FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License along with
    # this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
    # Street, Fifth Floor, Boston, MA 02110-1301, USA 
    #
    # DATE  : 2007-01-01
    # REV   : 2
    # REQUIREMENTS: numpy
    #
    #
    # Modified optAlign.py to use C1' carbon atoms of RNA for alignment.
    # Jan. 29, 2020 
    # Blaine Mooers, PhD
    # Univ. of Oklahoma Health Sciences Center
    #
    #############################################################################
    from array import *
     
    # system stuff
    import os
    import copy
     
    # pretty printing
    import pprint
     
    # for importing as a plugin into PyMol
    from pymol import cmd
    from pymol import stored
    from pymol import selector
     
    # using numpy for linear algebra
    import numpy
     
    def optAlignRNA( sel1, sel2 ):
    	"""
    	optAlignRNA performs the Kabsch alignment algorithm upon the C1' carbons of two selections.
    	Example: optAlignRNA 1JU7 and i. 1-16 and n. C1', 1CLL and i. 4-146 and n. C1'
     
    	Two RMSDs are returned.  One comes from the Kabsch algorithm and the other from
    	PyMOL based upon your selections.
    	
    	This function can be run in a for loop to fit multiple structures  with a common prefix name:
    	
    	for x in cmd.get_names(): optAlignRNA(x, "1JU7_0001")
    	 
    	or get the rmsds for all combinations, do the following:
    	 
    	[[optAlignRNA(x, y) for x in cmd.get_names()] for y in cmd.get_names()]
    
    	"""
    	cmd.reset()
     
    	# make the lists for holding coordinates
    	# partial lists
    	stored.sel1 = []
    	stored.sel2 = []
    	# full lists
    	stored.mol1 = []
    	stored.mol2 = []
     
    	# -- CUT HERE
    	sel1 += " and N. C1'"
    	sel2 += " and N. C1'"
    	# -- CUT HERE
     
    	# Get the selected coordinates.  We
    	# align these coords.
    	cmd.iterate_state(1, selector.process(sel1), "stored.sel1.append([x,y,z])")
    	cmd.iterate_state(1, selector.process(sel2), "stored.sel2.append([x,y,z])")
     
    	# get molecule name
    	mol1 = cmd.identify(sel1,1)[0][0]
    	mol2 = cmd.identify(sel2,1)[0][0]
     
    	# Get all molecule coords.  We do this because
    	# we have to rotate the whole molcule, not just
    	# the aligned selection
    	cmd.iterate_state(1, mol1, "stored.mol1.append([x,y,z])")
    	cmd.iterate_state(1, mol2, "stored.mol2.append([x,y,z])")
     
    	# check for consistency
    	assert len(stored.sel1) == len(stored.sel2)
    	L = len(stored.sel1)
    	assert L > 0
     
    	# must alway center the two proteins to avoid
    	# affine transformations.  Center the two proteins
    	# to their selections.
    	COM1 = numpy.sum(stored.sel1,axis=0) / float(L)
    	COM2 = numpy.sum(stored.sel2,axis=0) / float(L)
    	stored.sel1 -= COM1
    	stored.sel2 -= COM2
     
    	# Initial residual, see Kabsch.
    	E0 = numpy.sum( numpy.sum(stored.sel1 * stored.sel1,axis=0),axis=0) + numpy.sum( numpy.sum(stored.sel2 * stored.sel2,axis=0),axis=0)
     
    	#
    	# This beautiful step provides the answer.  V and Wt are the orthonormal
    	# bases that when multiplied by each other give us the rotation matrix, U.
    	# S, (Sigma, from SVD) provides us with the error!  Isn't SVD great!
    	V, S, Wt = numpy.linalg.svd( numpy.dot( numpy.transpose(stored.sel2), stored.sel1))
     
    	# we already have our solution, in the results from SVD.
    	# we just need to check for reflections and then produce
    	# the rotation.  V and Wt are orthonormal, so their det's
    	# are +/-1.
    	reflect = float(str(float(numpy.linalg.det(V) * numpy.linalg.det(Wt))))
     
    	if reflect == -1.0:
    		S[-1] = -S[-1]
    		V[:,-1] = -V[:,-1]
     
    	RMSD = E0 - (2.0 * sum(S))
    	RMSD = numpy.sqrt(abs(RMSD / L))
     
    	#U is simply V*Wt
    	U = numpy.dot(V, Wt)
     
    	# rotate and translate the molecule
    	stored.sel2 = numpy.dot((stored.mol2 - COM2), U)
    	stored.sel2 = stored.sel2.tolist()
    	# center the molecule
    	stored.sel1 = stored.mol1 - COM1
    	stored.sel1 = stored.sel1.tolist()
     
    	# let PyMol know about the changes to the coordinates
    	cmd.alter_state(1,mol1,"(x,y,z)=stored.sel1.pop(0)")
    	cmd.alter_state(1,mol2,"(x,y,z)=stored.sel2.pop(0)")
     
    	#print("Moved: %s Reference: %s RMSD = %f" % mol1, mol2, RMSD)
    	print("% s, % s,% 5.3f" % (mol1, mol2, RMSD))
     
    	# make the alignment OBVIOUS
    	cmd.hide('everything')
    	cmd.show('ribbon', sel1 + ' or ' + sel2)
    	cmd.color('gray70', mol1 )
    	cmd.color('magenta', mol2 )
    	cmd.color('red', 'visible')
    	cmd.show('ribbon', 'not visible')
    	cmd.center('visible')
    	cmd.orient()
    	cmd.zoom('visible')
     
    cmd.extend("optAlignRNA", optAlignRNA)

snippet loadManyFiles
abbr    loadManyFiles
alias   loadManyFiles
    # Copyright (c) 2004 Robert L. Campbell
    #
    # Modified for use with Python3.
    # Jan. 29, 2020 
    # Blaine Mooers, PhD
    # Univ. of Oklahoma Health Sciences Center
    #
    #
    from pymol import cmd
    import glob
    
    def loadFiles(files):
      """
      load_files <files>
    
      loads multiple files (using filename globbing)
      into a multiple objects named as the files are (e.g. collection of
      downloaded PDB files).
    
      e.g. load_files prot_*.pdb
      """
      file_list = glob.glob(files)
      if file_list:
        file_list.sort()
        for i in file_list:
          #obj_name = i.replace('.pdb','')
          #cmd.load(file_list[i],obj_name)
          cmd.load(i)
      else:
        print("No files found for pattern %s" % files)
    
    cmd.extend('loadFiles',loadFiles)

snippet loadAndAlignManyFiles3
abbr    loadAndAlignManyFiles3
alias   loadAndAlignManyFiles3
    # To save a multiple models in a file to separate pdb files.
    run {1:~/Scripts/}saveSep.py
    saveSep 

snippet allPairs
abbr    allPairs
alias   allPairs
    [[${1:optAlignRNA}(x, y) for x in cmd.get_names()] for y in cmd.get_names()];

snippet dssrBlock1
abbr    dssrBlock1
alias   dssrBlock1
    reinitialize;
    run /Users/blaine/.pymol/startup/dssr_block.py;
    fetch 1ehz, async=0;
    as cartoon;
    set cartoon_ladder_radius, 0.1;
    set cartoon_ladder_color, gray;
    set cartoon_nucleic_acid_mode, 1;
    set cartoon_nucleic_acid_color, orange;
    orient;turn z,30; translate [0,5,0]
    dssr_block;
    png ~/dssrBlock1.png 1600,1600

snippet dssrBlock2
abbr    dssrBlock2
alias   dssrBlock2
    reinitialize;
    run /Users/blaine/.pymol/startup/dssr_block.py;
    set cartoon_nucleic_acid_color, orange;
    fetch 1ehz, async=0;
    dssr_block block_file=wc

snippet dssrBlock3
abbr    dssrBlock3
alias   dssrBlock3
    reinitialize;
    # Edit the path to Thomas Holder's block script.;
    run ${1:"/Users/blaine/.pymol/startup/dssr_block.py;
    fetch ${2:2n2d}, async=0;
    dssr_block  ${2:2n2d}, 0;
    set all_states;

snippet dssrBlock4
abbr    dssrBlock4
alias   dssrBlock4
    reinitialize;
    ${1:run /Users/blaine/.pymol/startup/dssr_block.py};
    fetch ${2:1msy}, async=0;
    set cartoon_nucleic_acid_color, ${3:orange};
    dssr_block block_color=N red | minor 0.9 | major yellow;

snippet nucleicAcidCartoon
abbr    nucleicAcidCartoon
alias   nucleicAcidCartoon
    # The dark blue used for electron density maps is called 'density'.;
    set cartoon_ladder_color, ${1:density};
    # The cartoon_ladder_radius should be renamed the cartoon_rung_radius. The dimensions are in Angstroms.;
    set cartoon_ladder_radius, ${2:0.2};
    set cartoon_nucleic_acid_color, ${3:red};
    # The cartoon ring modes range from 0 to 4.;
    set cartoon_ring_mode, ${4:2};

snippet nucleicAcidCartoon2Strands
abbr    nucleicAcidCartoon2Strands
alias   nucleicAcidCartoon2Strands
    # There is not support for applying different settings to different selections.
    # Instead, this can be done for different objects.
    # Coloring two strand differently of a double helix makes it easier to for the viewer to distinguish the two strands.
    # The set command as the syntax of  setting_name [, setting_value [, selection [,state ]]]
    # In this case, the selection has to be global, object, object-state, or per-atom settings.
    # It cannot be a named selection.
    # Coloring two strand differently of a double helix makes it easier to for the viewer to distinguish the two strands.
    # Many double-stranded helices have one strand in the asymmetric unit.
    # The second strand is in the biological unit.;
    # The coordinates for the second strand are in the pdb1 file type at the PDB.;
    # The second strand is in the second state, which is equivalent to the second model in the pdb file.;
    # The strands are labeled chain A and B (via the cartoon_nucliec_acid_color setting).;
    # The bases are colored differently too (via the cartoon_ladder_color setting).;
    fetch ${1:3nd3}, ${2:3nd3}, type=${3:pdb1};
    set all_states, on;
    create chA, ${2:3nd3}, 1, 1;
    create chB, ${2:3nd3}, 2, 1;
    # colors only the backbone;
    set cartoon_nucleic_acid_color, ${4:magenta}, chA;
    set cartoon_nucleic_acid_color, ${5:orange}, chB;
    # color the bases;
    set cartoon_ladder_color,  ${6:density}, chA;
    set cartoon_ladder_color,  ${7:yellow}, chB;

snippet nucleicAcidColorbySequence
abbr    nucleicAcidColorbySequence
alias   nucleicAcidColorbySequence
    select rna_A, resn A;
    select rna_C, resn C;
    select rna_G, resn G;
    select rna_U, resn U;
    select dna_T, resn T;
    color ${1:yellow}, rna_A;
    color ${2:red}, rna_C; 
    color ${3:gray40}, rna_G;
    color ${4:palecyan}, rna_U;
    color ${5:brown}, dna_T;

snippet nucleicAcidFlatRibbonColorbySequence
abbr    nucleicAcidFlatRibbonColorbySequence
alias   nucleicAcidFlatRibbonColorbySequence
    bg_color white;
    set cartoon_oval_length, ${1:1.85};
    set cartoon_oval_width, ${2:0.5};
    cartoon oval;
    set cartoon_ring_mode, ${3:3};
    # set the color of the backbone oval;
    set cartoon_nucleic_acid_color, ${4:blue};
    select rna_A, resn A;
    select rna_C, resn C;
    select rna_G, resn G;
    select rna_U, resn U;
    select dna_T, resn T;
    color ${5:yellow}, rna_A;
    color ${6:red}, rna_C; 
    color ${7:gray40}, rna_G;
    color ${8:palecyan}, rna_U;
    color ${9:brown}, dna_T;
    as cartoon;

snippet nucleicAcidCartoonFilledRings
abbr    nucleicAcidCartoonFilledRings
alias   nucleicAcidCartoonFilledRings
    bg_color white;
    show sticks;
    set cartoon_ring_mode, 3;
    set cartoon_ring_finder, 1;
    set cartoon_ladder_mode, 1;
    set cartoon_nucleic_acid_mode, 4;
    set cartoon_ring_transparency, 0.5;
    as cartoon;

snippet basePairStacking
abbr    basePairStacking
alias   basePairStacking
    delete all;
    fetch 4PCO, type=pdb, async=0;
    select G2G3, ( ((resi 2 or resi 3) and chain A) or ((resi 8 or resi 9) and chain B));
    remove not G2G3;
    bg_color white;
    show sticks;
    set stick_radius=0.14;
    set stick_ball, on; 
    set stick_ball_ratio,1.9;
    set_view (-0.75,0.09,0.66,-0.2,0.92,-0.35,-0.64,-0.39,-0.67,-0.0,-0.0,-43.7,7.24,9.55,11.78,29.46,57.91,-20.0);
    remove name H*;
    select carbon1, element C and (resi 3 or resi 8) 
    # select lower base pair;
    select carbon2, element C and (resi 2 or resi 9) 
    #select upper base pair;
    color gray70, carbon1;
    color gray10, carbon2;
    show sticks;
    space cmyk;
    distance hbond1, /4PCO//B/U`9/N3,/4PCO//A/G`2/O6;
    distance hbond2, /4PCO//B/U`9/O2,/4PCO//A/G`2/N1;
    distance hbond3, /4PCO//A/U`3/N3,/4PCO//B/G`8/O6;
    distance hbond4, /4PCO//A/U`3/O2,/4PCO//B/G`8/N1;
    color black, hbond1;
    color black, hbond2;
    color gray70, hbond3;
    color gray70, hbond4;
    show nb_spheres;
    set nb_spheres_size, 0.35;
    hide labels;
    ray 1600,1000;
    png 4PCO.png;

snippet nucleicAcidDumbellCartoonColorbySequence
abbr    nucleicAcidDumbellCartoonColorbySequence
alias   nucleicAcidDumbellCartoonColorbySequence
    bg_color white;
    set cartoon_oval_length, ${1:1.85}
    set cartoon_oval_width, ${2:0.5}
    cartoon oval;
    cartoon dumbbell;
    set cartoon_dumbbell_width, 0.2;
    set cartoon_dumbbell_radius, 0.4;
    set cartoon_ring_mode, ${3:3};
    # set the color of the backbone oval
    set cartoon_nucleic_acid_color, ${4:blue};
    select rna_A, resn A;
    select rna_C, resn C;
    select rna_G, resn G;
    select rna_U, resn U;
    select dna_T, resn T;
    color ${5:yellow}, rna_A;
    color ${6:red}, rna_C; 
    color ${7:gray40}, rna_G;
    color ${8:palecyan}, rna_U;
    color ${9:brown}, dna_T;
    as cartoon;

snippet stereokb
abbr    stereokb
alias   stereokb
    cmd.set_key('F1',lambda:cmd.stereo({'on':0,'off':1}[cmd.get('stereo')]));

snippet listSettings2
abbr    listSettings2
alias   listSettings2
    list = setting.get_name_list();[print("%s => %s" % (name, setting.get_setting_text(name))) for name in list];

snippet listSettings
abbr    listSettings
alias   listSettings
    [print("%s => %s" % (name, setting.get_setting_text(name))) for name in setting.get_name_list()];

snippet displayFonts
abbr    displayFonts
alias   displayFonts
    python;
    for i in range(1,21):
         name = 'label%d' % i;
         cmd.pseudoatom(name, label='label font id %d' % i, pos=(0,0,0));
         cmd.set('label_font_id', i, name);
    python end;
    cmd.set('label_size', 50);
    cmd.set('grid_mode');

snippet listObjects
abbr    listObjects
alias   listObjects
    objList = cmd.get_names("objects");print(objList);

snippet listLigandProteinDistances
abbr    listLigandProteinDistances
alias   listLigandProteinDistances
    from pymol import cmd
    """
    Find all distances betwen all ligand atoms and all protein atoms. 
    
    Adapted and updated from script by Dan Kulp posted here
    https://sourceforge.net/p/pymol/mailman/message/10097804/
    
    There are probably better solutions like finding just the 
    distances to proein atoms within a certain distance from 
    the ligand.
    
    Due to the nested for loops, this script is takes several second
    to run on a medium-sized human protein. This script is a 
    good candidate for vectorization. 
    
    It is also a good candiate for becoming a function and a shortcut. 
    
    """
    
    # customize these lines to your protein.
    cmd.fetch("6NEC")
    cmd.select("prot","not resn XIN and not resn HOH and not chain C")
    cmd.select("lig", "resn XIN and not chain C")
    
    dist_list = {}
    pro_atoms = cmd.get_model("prot")
    lig_atoms = cmd.get_model("lig")
    
    for l_at in lig_atoms.atom:
        for p_at in pro_atoms.atom:
            dist_list[str(l_at.resn) +
                         ":" +
                          str(l_at.resi) +
                          " " +
                          l_at.name +
                          " ---- " + 
                          str(p_at.resn) +
                          ":" +
                          str(p_at.resi) +
                          " " +
                          p_at.name] = cmd.dist("foo", 
                                                "index " +
                                                str(l_at.index),"index " + str(p_at.index))
            cmd.delete("foo")
    print("List of all pairwise ligand--protein atom-atom distances:")
    # [print("Distance of " + d + " is " + str(dist_list[d])) for d in dist_list.keys()]
    
    # More compact print statement. Need an f-string format statement.
    [print( d + " " + str(dist_list[d])) for d in dist_list.keys()]

snippet nucleicAcidBackboneTubesSticks
abbr    nucleicAcidBackboneTubesSticks
alias   nucleicAcidBackboneTubesSticks
    set bg_rgb, white;
    hide everything, all;
    # Change to the name of your molecular object.;
    show cartoon, ${1:3nd3};
    set cartoon_sampling,1;
    set cartoon_tube_radius, 0.5;
    set cartoon_ladder_mode, 0;
    # Set to 0.0 to turn off transparency;
    set cartoon_transparency, ${2:0.65};
    # The default strick radisu is 0.25. I think it is too thick.;
    set stick_radius ${3:0.12};
    show sticks;
    hide sticks, element H;

snippet symexp
abbr    symexp
alias   symexp
    symexp ${1:symm}, ${2:3fa0}, (${2:3fa0}), ${3:20},${4:1};

snippet addAxis
abbr    addAxis
alias   addAxis
    python
    from pymol.cgo import *    # get constants
    from pymol import cmd
    
    import math
    
    class Counter:
        """
        draw_line
        source https://www.pymolwiki.org/index.php/Symmetry_Axis
        
        Pymol script copyright Matthew O'Meara and Xavier Ambroggio 2007
        
        Under  GNU Free Documentation License 1.2
        
        Example:
        
        draw_axis(x=18.232, y=17.150, z=9.488,i=-.226639, j=0.708772, k=-.668039, r=1, b=0, g=0, width=1, length=100)
        
        Updated 15 June 2020 
        Blaine Mooers
        
        Notes:
        1) Could be useful for the adding a symmery axis, a ncs axis, or scale bar to a scene.
        2) The postion (xyz) is the middle of the line, not one end as expected for a vector.
        3) Another example: draw_axis(x=0, y=0, z=0,i=0, j=0, k=1, r=1, b=0, g=0, width=300, length=96) 
        4) Changed print statement to Python3 print function.
        5) Replaced cmd.extend() with function generator.
        """
       def __init__(self):
           self.state = 1
    counter = Counter()
    
    @cmd.extend
    def draw_axis(x=None, y=None, z=None, i=None, j=None, k=None, length=20.0, r=1.0, g=1.0, b=1.0, width=1.0 ):
       if x == None or y == None or z == None or i == None or j == None or k== None :
           print('Usage: draw_axis x,y,z, i,k,j, length, r,g,b, width')
           print('draw a line centered at (x,y,z) with the direction vector (i,j,k)')
           print('length, color (r,g,b), and width arguments are optional')
    #        print 'For a fun example of the command, run draw_axis_example'
       else :
           x,y,z = float(x), float(y), float(z)
           i,j,k = float(i), float(j), float(k)
           r,g,b = float(r), float(g), float(b)
           width = float(width)
           length = float(length) / 2.0
    
           x1,y1,z1 = (x+i*length,y+j*length,z+k*length)
           x2,y2,z2 = (x-i*length,y-j*length,z-k*length)
    
           obj = [
               LINEWIDTH, width,
               BEGIN, LINES,
    
               COLOR,   r,  g,  b,
               VERTEX, x1, y1, z1,
               VERTEX, x2, y2, z2,
    
               END
               ]
    
           cmd.load_cgo(obj,'axis'+str(counter.state))
           counter.state += 1
    python end

snippet synch
abbr    synch
alias   synch
    cmd.sync(timeout=${1:1.0},poll=${2:0.05});

snippet renumResi
abbr    renumResi
alias   renumResi
    alter ${1:3fa0}, resi=str(int(resi)+${2:100});sort;

snippet renumAtoms
abbr    renumAtoms
alias   renumAtoms
    alter {$1:3fa0}, ID=ID+${2:100};
    sort;

snippet renameChain
abbr    renameChain
alias   renameChain
    alter ${1:3fa0} and chain ${2:A}, chain=${3:"C"};
    sort;

snippet printAtomNumbers
abbr    printAtomNumbers
alias   printAtomNumbers
    iterate (resi ${1:1}), print(name + " %i${1:5}" % ID);

snippet printAtomNames
abbr    printAtomNames
alias   printAtomNames
    iterate (resi ${1:101}), print(name);

snippet printBfactors
abbr    printBfactors
alias   printBfactors
    iterate (resi ${1:101}), print(name + " %.2f" % b);

snippet printVDWradii
abbr    printVDWradii
alias   printVDWradii
    iterate (resi ${1:101}), print(name + " %.2f" % vdw);

snippet printCoordinates
abbr    printCoordinates
alias   printCoordinates
    stored.coords = []; 
    iterate_state 1, (resi ${1:101}), stored.coords.append([x,y,z]); 
    [print(i) for i in stored.coords];

snippet printNamesCoordinates
abbr    printNamesCoordinates
alias   printNamesCoordinates
    stored.names = [];  iterate_state 1, (resi ${1:101}), stored.names.append([name]); 
    stored.coords = []; iterate_state 1, (resi ${1:101})), stored.coords.append([x,y,z]); 
    [print(i,j) for i,j in zip(stored.names, stored.coords)];

snippet printNamesCoordinates
abbr    printNamesCoordinates
alias   printNamesCoordinates
    stored.coords = []; iterate_state 1, (resi ${1:101}), stored.coords.append([x,y,z]); 
    stored.names = [];  iterate_state 1, (resi ${1:101}), stored.names.append([name]);
    stored.names3 = [tuple(i) for i in stored.names];
    [print(i,j) for i,j in(zip(stored.names3, stored.coords)];

snippet emacsjupyterSourceBlock
abbr    emacsjupyterSourceBlock
alias   emacsjupyterSourceBlock
    #+BEGIN_SRC jupyter-python :session py :kernel pymol.python :exports both :results raw drawer 
    from pymol import cmd
    cmd.do("reinitialize")
    cmd.bg_color("white")
    cmd.do("fetch 6VXX")
    cmd.do("zoom (resi 614 and chain A)")
    cmd.label(selection="chain A and resi 614 and name CB", expression="'%s-%s' % (resn,resi)")
    cmd.do("set label_color, black; set label_size, 48")
    cmd.do("set stick_radius, 0.12")
    cmd.do("hide cartoon; show sticks")
    cmd.do("set ray_shadows, 0")
    cmd.do("draw")
    cmd.do("png /Users/blaine/D614Gipython3.png, 600, 360, dpi=600")
    from IPython.display import Image
    from IPython.core.display import HTML
    PATH = "/Users/blaine/"
    Image(filename = PATH + "D614Gipython3.png", width=600, unconfined=True)
    #+END_SRC
    
    #+RESULTS:

snippet obipythonSourceBlock
abbr    obipythonSourceBlock
alias   obipythonSourceBlock
    #+BEGIN_SRC ipython :session py :kernel pymol.python :exports both :results raw drawer 
    from pymol import cmd
    cmd.do("reinitialize")
    cmd.bg_color("white")
    cmd.do("fetch 6VXX")
    cmd.do("zoom (resi 614 and chain A)")
    cmd.label(selection="chain A and resi 614 and name CB", expression="'%s-%s' % (resn,resi)")
    cmd.do("set label_color, black; set label_size, 48")
    cmd.do("set stick_radius, 0.12")
    cmd.do("hide cartoon; show sticks")
    cmd.do("set ray_shadows, 0")
    cmd.do("draw")
    cmd.do("png /Users/blaine/D614Gipython3.png, 600, 360, dpi=600")
    from IPython.display import Image
    from IPython.core.display import HTML
    PATH = "/Users/blaine/"
    Image(filename = PATH + "D614Gipython3.png", width=600, unconfined=True)
    #+END_SRC
    
    #+RESULTS:

snippet importPyMOLcmd
abbr    importPyMOLcmd
alias   importPyMOLcmd
    from pymol import cmd

snippet importIPythonDisplay
abbr    importIPythonDisplay
alias   importIPythonDisplay
    from IPython.display import Image
    from IPython.core.display import HTML
    PATH = "/Users/blaine/"

snippet loadImage
abbr    loadImage
alias   loadImage
    Image(filename = PATH +"${1:5da6orient}.png", width=${2:600}, height=${3:1000}, unconfined=True);

snippet imports4PyMOLjupyter
abbr    imports4PyMOLjupyter
alias   imports4PyMOLjupyter
    from pymol import cmd
    from IPython.display import Image
    from IPython.core.display import HTML
    PATH = "/Users/blaine/"

snippet getCoordinatespy
abbr    getCoordinatespy
alias   getCoordinatespy
    print(cmd.get_atom_coords(${1:'/4PCO//B/G`8/OP2'}));

snippet fastapy
abbr    fastapy
alias   fastapy
    # Get the sequences of all molecular objects.;
    print(cmd.get_fastastr('${1:all}'));

snippet fetchThreeMaps
abbr    fetchThreeMaps
alias   fetchThreeMaps
    fetch ${1:4dgr}, type=pdb;
    # Make sure to rename map file so that ;
    # the root filename differs from pdb root filename;
    fetch ${1:4dgr},  ${1:4dgr}_2fofc, type=2fofc;
    fetch ${1:4dgr}, ${1:4dgr}_fofc, type=fofc;
    select  ${2:glycan}, ${3:resid 200 or resid 469:477};
    isomesh ${4:mesh1}, 2fofc, 1.0, ${2:glycan};
    color density, ${4:mesh1};
    isomesh ${5:mesh2}, fofc, 3.0, ${2:glycan};
    color green, ${5:mesh2};
    isomesh ${6:mesh3}, fofc, -3.0, ${2:glycan};
    color red, ${6:mesh3};

snippet scaleRadiusColorpy
abbr    scaleRadiusColorpy
alias   scaleRadiusColorpy
    cmd.do('bg_color white;')
    cmd.do('hide everything;')
    cmd.do('show spheres;')
    cmd.do('set  stick_radius = 0.1;')
    cmd.do('hide everything, HET;')
    cmd.do('show spheres, HET;')
    cmd.do('set sphere_quality=3;')
    cmd.do('show sticks, resi 1102;')
    cmd.do('from pymol import stored;')
    cmd.do('# set the stored array equal to the b−values or use your own values; ')
    cmd.do('stored.bb = [ ];')
    cmd.do('iterate all, stored.bb.append(b);')
    # scale the b−values;
    cmd.do('M = max(stored.bb);')
    cmd.do('scaledBB = map(lambda x: float (x/M), stored.bb);')
    count = 0;
    # set the sphere radii independently;
    for x in scaledBB:
         cmd.set("sphere_scale", x ,"ID %s"%count)
         count = count + 1
    cmd.do('spectrum b, selection=4gdx;')
    cmd.do('space cmyk;')
    cmd.do('set specular_intensity , 0.25;')

snippet scaleRadiusColorPythonInsertpy
abbr    scaleRadiusColorPythonInsertpy
alias   scaleRadiusColorPythonInsertpy
    # scale the b−values;
    M = max(stored.bb);
    scaledBB = map(lambda x: float (x/M), stored.bb);
    count = 0;
    # set the sphere radii independently;
    #[(cmd.set("sphere_scale", x ,"ID %s"%count); count = count + 1) for x in scaledBB]
    for x in scaledBB:
      cmd.set("sphere_scale", x ,"ID %s"%count)
      count = count + 1

snippet spngpy
abbr    spngpy
alias   spngpy
    import datetime;
    from pymol import cmd; 
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT); 
    cmd.save(stemName+s+".png"); 

snippet displayFontspy
abbr    displayFontspy
alias   displayFontspy
    for i in range(1,21):
         name = 'label%d' % i;
         cmd.pseudoatom(name, label='label font id %d' % i, pos=(0,0,0));
         cmd.set('label_font_id', i, name);
    cmd.set('label_size', 50);
    cmd.set('grid_mode');

snippet aveB4resiXpy
abbr    aveB4resiXpy
alias   aveB4resiXpy
    # AveBResiX, prints the resiude number and the average bfactor.;
    # Uses reduce and lambda, builtin Python functional porgramming functions.;
    # Note that you need to convert the length of the list of Bfactors from an integer to a float before division into the sum.;
    Bfactors = [];
    # edit the selection below, which is a range of residue numbers here.;
    iterate (resi ${1:133}), Bfactors.append(b);
    print( "Average B-factor of residue ", %{1:133} , "   = ", "%.2f" %(reduce(lambda x, y: x + y, Bfactors) / float(len(Bfactors))) );

snippet sc441
abbr    sc441
alias   sc441
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 4, 4, 1, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc444
abbr    sc444
alias   sc444
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 4, 4, 4, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc414
abbr    sc414
alias   sc414
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 4, 1, 4, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc144
abbr    sc144
alias   sc144
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 1, 4, 4, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sc444
abbr    sc444
alias   sc444
    run $HOME/${1:Scripts/PyMOLscripts/}supercell.py;
    supercell 4, 4, 4, ,  ${2:orange},  ${3:supercell1}, 1;

snippet sdaepy
abbr    sdaepy
alias   sdaepy
    import datetime;
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT); 
    cmd.save(stemName+s+".dae"); 

snippet sccp4py
abbr    sccp4py
alias   sccp4py
    import datetime;
    from pymol import cmd; 
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT); 
    cmd.save(stemName+s+".ccp4"); 

snippet salnpy
abbr    salnpy
alias   salnpy
    import datetime;
    from pymol import cmd;
    DT =datetime.datetime.now().strftime("yr%Ymo%mday%dhr%Hmin%M");
    s = str(DT);
    cmd.save(stemName+s+".aln");

snippet lspymolrcpy
abbr    lspymolrcpy
alias   lspymolrcpy
    print(invocation.options.deferred);

snippet printDocpy
abbr    printDocpy
alias   printDocpy
    print(${1:my_func}.__doc__);

snippet printPathpy
abbr    printPathpy
alias   printPathpy
    # Print the path to the current used PyMOL binary.
    print(pymol.__path__)

snippet pymoldocspy
abbr    pymoldocspy
alias   pymoldocspy
    [help(i) for i in dir(pymol)];

snippet aobw
abbr    aobw
alias   aobw
    # Note: requires the gscale() function from pymolshortcuts.py.
    # Download this script from http://GitHub.com/MooersLab/pymolshortcuts.
    # Load the functions from this script with the command 'run pymolshortcuts.py'
    set_color oxygen, [1.0,0.4,0.4];
    set_color nitrogen, [0.5,0.5,1.0];
    remove solvent;
    as spheres;
    util.cbaw;
    bg white;
    gscale();
    set light_count,10;
    set spec_count,1;
    set shininess, 10;
    set specular,0.25;
    set ambient,0;
    set direct,0;
    set reflect,1.5;
    set ray_shadow_decay_factor, 0.1;
    set ray_shadow_decay_range, 2;
    set depth_cue, 0;
    ray;

snippet aod
abbr    aod
alias   aod
    set_color oxygen, [1.0,0.4,0.4];
    set_color nitrogen, [0.5,0.5,1.0];
    remove solvent;
    as spheres;
    util.cbaw;
    bg white;
    set light_count,10;
    set spec_count,1;
    set shininess, 10;
    set specular,0.25;
    set ambient,0;
    set direct,0;
    set reflect,1.5;
    set ray_shadow_decay_factor, 0.1;
    set ray_shadow_decay_range, 2;
    color gray00, symbol c
    color gray90, symbol h
    set depth_cue, 0;
    ray;

snippet aodbw
abbr    aodbw
alias   aodbw
    # Note: requires the gscale() function from pymolshortcuts.py.
    # Download this script from http://GitHub.com/MooersLab/pymolshortcuts.
    # Load the functions from this script with the command 'run pymolshortcuts.py'
    set_color oxygen, [1.0,0.4,0.4];
    set_color nitrogen, [0.5,0.5,1.0];
    remove solvent;
    as spheres;
    util.cbaw;
    bg white;
    gscale();
    set light_count,10;
    set spec_count,1;
    set shininess, 10;
    set specular,0.25;
    set ambient,0;
    set direct,0;
    set reflect,1.5;
    set ray_shadow_decay_factor, 0.1;
    set ray_shadow_decay_range, 2;
    set depth_cue, 0;
    ray;

snippet addAxispy
abbr    addAxispy
alias   addAxispy
    from pymol.cgo import *    # get constants
    from pymol import cmd
    
    import math
    
    class Counter:
        """
        draw_line
        source https://www.pymolwiki.org/index.php/Symmetry_Axis
        
        Pymol script copyright Matthew O'Meara and Xavier Ambroggio 2007
        
        Under  GNU Free Documentation License 1.2
        
        Example:
        
        draw_axis(x=18.232, y=17.150, z=9.488,i=-.226639, j=0.708772, k=-.668039, r=1, b=0, g=0, width=1, length=100)
        
        Updated 15 June 2020 
        Blaine Mooers
        
        Notes:
        1) Could be useful for the adding a symmery axis, a ncs axis, or scale bar to a scene.
        2) The postion (xyz) is the middle of the line, not one end as expected for a vector.
        3) Another example: draw_axis(x=0, y=0, z=0,i=0, j=0, k=1, r=1, b=0, g=0, width=300, length=96) 
        4) Changed print statement to Python3 print function.
        5) Replaced cmd.extend() with function generator.
        """
       def __init__(self):
           self.state = 1
    counter = Counter()
    
    @cmd.extend
    def draw_axis(x=None, y=None, z=None, i=None, j=None, k=None, length=20.0, r=1.0, g=1.0, b=1.0, width=1.0 ):
       if x == None or y == None or z == None or i == None or j == None or k== None :
           print('Usage: draw_axis x,y,z, i,k,j, length, r,g,b, width')
           print('draw a line centered at (x,y,z) with the direction vector (i,j,k)')
           print('length, color (r,g,b), and width arguments are optional')
    #        print 'For a fun example of the command, run draw_axis_example'
       else :
           x,y,z = float(x), float(y), float(z)
           i,j,k = float(i), float(j), float(k)
           r,g,b = float(r), float(g), float(b)
           width = float(width)
           length = float(length) / 2.0
    
           x1,y1,z1 = (x+i*length,y+j*length,z+k*length)
           x2,y2,z2 = (x-i*length,y-j*length,z-k*length)
    
           obj = [
               LINEWIDTH, width,
               BEGIN, LINES,
    
               COLOR,   r,  g,  b,
               VERTEX, x1, y1, z1,
               VERTEX, x2, y2, z2,
    
               END
               ]
    
           cmd.load_cgo(obj,'axis'+str(counter.state))
           counter.state += 1

snippet grayscalepy
abbr    grayscalepy
alias   grayscalepy
    def grayscale(selection="all"):
        """Apply by entering grayscale()"""
        cmd.color('grey64', 'elem Ac')
        cmd.color('grey67', 'elem Al')
        cmd.color('grey39', 'elem Am')
        cmd.color('grey46', 'elem Sb')
        cmd.color('grey75', 'elem Ar')
        cmd.color('grey58', 'elem As')
        cmd.color('grey33', 'elem At')
        cmd.color('grey56', 'elem Ba')
        cmd.color('grey40', 'elem Bk')
        cmd.color('grey87', 'elem Be')
        cmd.color('grey40', 'elem Bi')
        cmd.color('grey20', 'elem Bh')
        cmd.color('grey77', 'elem B')
        cmd.color('grey26', 'elem Br')
        cmd.color('grey86', 'elem Cd')
        cmd.color('grey76', 'elem Ca')
        cmd.color('grey34', 'elem Cf')
        cmd.color('grey77', 'elem C')
        cmd.color('grey98', 'elem Ce')
        cmd.color('grey17', 'elem Cs')
        cmd.color('grey70', 'elem Cl')
        cmd.color('grey60', 'elem Cr')
        cmd.color('grey64', 'elem Co')
        cmd.color('grey54', 'elem Cu')
        cmd.color('grey42', 'elem Cm')
        cmd.color('grey89', 'elem D')
        cmd.color('grey19', 'elem Db')
        cmd.color('grey79', 'elem Dy')
        cmd.color('grey29', 'elem Es')
        cmd.color('grey67', 'elem Er')
        cmd.color('grey85', 'elem Eu')
        cmd.color('grey28', 'elem Fm')
        cmd.color('grey93', 'elem F')
        cmd.color('grey8', 'elem Fr')
        cmd.color('grey82', 'elem Gd')
        cmd.color('grey60', 'elem Ga')
        cmd.color('grey52', 'elem Ge')
        cmd.color('grey80', 'elem Au')
        cmd.color('grey68', 'elem Hf')
        cmd.color('grey20', 'elem Hs')
        cmd.color('grey96', 'elem He')
        cmd.color('grey75', 'elem Ho')
        cmd.color('grey89', 'elem H')
        cmd.color('grey49', 'elem In')
        cmd.color('grey16', 'elem I')
        cmd.color('grey29', 'elem Ir')
        cmd.color('grey48', 'elem Fe')
        cmd.color('grey65', 'elem Kr')
        cmd.color('grey76', 'elem La')
        cmd.color('grey19', 'elem Lr')
        cmd.color('grey34', 'elem Pb')
        cmd.color('grey60', 'elem Li')
        cmd.color('grey48', 'elem Lu')
        cmd.color('grey83', 'elem Mg')
        cmd.color('grey52', 'elem Mn')
        cmd.color('grey20', 'elem Mt')
        cmd.color('grey23', 'elem Md')
        cmd.color('grey72', 'elem Hg')
        cmd.color('grey62', 'elem Mo')
        cmd.color('grey93', 'elem Nd')
        cmd.color('grey85', 'elem Ne')
        cmd.color('grey43', 'elem Np')
        cmd.color('grey67', 'elem Ni')
        cmd.color('grey69', 'elem Nb')
        cmd.color('grey25', 'elem N')
        cmd.color('grey23', 'elem No')
        cmd.color('grey36', 'elem Os')
        cmd.color('grey44', 'elem O')
        cmd.color('grey33', 'elem Pd')
        cmd.color('grey57', 'elem P')
        cmd.color('grey82', 'elem Pt')
        cmd.color('grey37', 'elem Pu')
        cmd.color('grey40', 'elem Po')
        cmd.color('grey35', 'elem K')
        cmd.color('grey95', 'elem Pr')
        cmd.color('grey90', 'elem Pm')
        cmd.color('grey52', 'elem Pa')
        cmd.color('grey35', 'elem Ra')
        cmd.color('grey46', 'elem Rn')
        cmd.color('grey43', 'elem Re')
        cmd.color('grey39', 'elem Rh')
        cmd.color('grey27', 'elem Rb')
        cmd.color('grey47', 'elem Ru')
        cmd.color('grey19', 'elem Rf')
        cmd.color('grey89', 'elem Sm')
        cmd.color('grey90', 'elem Sc')
        cmd.color('grey20', 'elem Sg')
        cmd.color('grey66', 'elem Se')
        cmd.color('grey80', 'elem Si')
        cmd.color('grey75', 'elem Ag')
        cmd.color('grey46', 'elem Na')
        cmd.color('grey71', 'elem Sr')
        cmd.color('grey76', 'elem S')
        cmd.color('grey60', 'elem Ta')
        cmd.color('grey53', 'elem Tc')
        cmd.color('grey51', 'elem Te')
        cmd.color('grey81', 'elem Tb')
        cmd.color('grey39', 'elem Tl')
        cmd.color('grey59', 'elem Th')
        cmd.color('grey61', 'elem Tm')
        cmd.color('grey48', 'elem Sn')
        cmd.color('grey75', 'elem Ti')
        cmd.color('grey50', 'elem W')
        cmd.color('grey47', 'elem U')
        cmd.color('grey65', 'elem V')
        cmd.color('grey54', 'elem Xe')
        cmd.color('grey55', 'elem Yb')
        cmd.color('grey91', 'elem Y')
        cmd.color('grey51', 'elem Zn')
        cmd.color('grey81', 'elem Zr')
    cmd.extend('grayscale',grayscale)

snippet importShortcuts
abbr    importShortcuts
alias   importShortcuts
    cmd.do('run /Users/blaine/Scripts/PyMOLScripts/pymolshortcuts.py')

snippet rv
abbr    rv
alias   rv
    cmd.do('rv')

snippet AO
abbr    AO
alias   AO
    cmd.do('AO')

snippet AOBW
abbr    AOBW
alias   AOBW
    cmd.do('AOBW')

snippet AOD
abbr    AOD
alias   AOD
    cmd.do('AOD')

snippet AODBW
abbr    AODBW
alias   AODBW
    cmd.do('AODBW')

snippet unitCellEdgesColorBlack
abbr    unitCellEdgesColorBlack
alias   unitCellEdgesColorBlack
    # show the unit cell;
    show cell;
    color black, ${1:1lw9};
    # color by atom with carbons colored green,
    util.${2:cbag};
    set cgo_line_width, 2.5;
    png  ${3:testCell3}.png, ${4:1600},${5:1600};${6:600};${7:0}

snippet printColorByAtomCodes
abbr    printColorByAtomCodes
alias   printColorByAtomCodes
    print('util.cbag, green carbons atoms \nutil.cbac, cyan carbon atoms \nutil.cbam, magenta carbon atoms \nutil.cbay, yellow carbons atoms \nutil.cbas, salmon carbons atoms \nutil.cbaw, white carbons atoms \nutil.cbab, slate carbons atoms \nutil.cbao, bright orange carbons atoms \nutil.cbap, purple carbons atoms \nutil.cbap, pink carbons atoms')

snippet grayscale
abbr    grayscale
alias   grayscale
    python
    def grayscale(selection="all"):
        """Apply by entering grayscale"""
        cmd.color('grey64', 'elem Ac')
        cmd.color('grey67', 'elem Al')
        cmd.color('grey39', 'elem Am')
        cmd.color('grey46', 'elem Sb')
        cmd.color('grey75', 'elem Ar')
        cmd.color('grey58', 'elem As')
        cmd.color('grey33', 'elem At')
        cmd.color('grey56', 'elem Ba')
        cmd.color('grey40', 'elem Bk')
        cmd.color('grey87', 'elem Be')
        cmd.color('grey40', 'elem Bi')
        cmd.color('grey20', 'elem Bh')
        cmd.color('grey77', 'elem B')
        cmd.color('grey26', 'elem Br')
        cmd.color('grey86', 'elem Cd')
        cmd.color('grey76', 'elem Ca')
        cmd.color('grey34', 'elem Cf')
        cmd.color('grey77', 'elem C')
        cmd.color('grey98', 'elem Ce')
        cmd.color('grey17', 'elem Cs')
        cmd.color('grey70', 'elem Cl')
        cmd.color('grey60', 'elem Cr')
        cmd.color('grey64', 'elem Co')
        cmd.color('grey54', 'elem Cu')
        cmd.color('grey42', 'elem Cm')
        cmd.color('grey89', 'elem D')
        cmd.color('grey19', 'elem Db')
        cmd.color('grey79', 'elem Dy')
        cmd.color('grey29', 'elem Es')
        cmd.color('grey67', 'elem Er')
        cmd.color('grey85', 'elem Eu')
        cmd.color('grey28', 'elem Fm')
        cmd.color('grey93', 'elem F')
        cmd.color('grey8', 'elem Fr')
        cmd.color('grey82', 'elem Gd')
        cmd.color('grey60', 'elem Ga')
        cmd.color('grey52', 'elem Ge')
        cmd.color('grey80', 'elem Au')
        cmd.color('grey68', 'elem Hf')
        cmd.color('grey20', 'elem Hs')
        cmd.color('grey96', 'elem He')
        cmd.color('grey75', 'elem Ho')
        cmd.color('grey89', 'elem H')
        cmd.color('grey49', 'elem In')
        cmd.color('grey16', 'elem I')
        cmd.color('grey29', 'elem Ir')
        cmd.color('grey48', 'elem Fe')
        cmd.color('grey65', 'elem Kr')
        cmd.color('grey76', 'elem La')
        cmd.color('grey19', 'elem Lr')
        cmd.color('grey34', 'elem Pb')
        cmd.color('grey60', 'elem Li')
        cmd.color('grey48', 'elem Lu')
        cmd.color('grey83', 'elem Mg')
        cmd.color('grey52', 'elem Mn')
        cmd.color('grey20', 'elem Mt')
        cmd.color('grey23', 'elem Md')
        cmd.color('grey72', 'elem Hg')
        cmd.color('grey62', 'elem Mo')
        cmd.color('grey93', 'elem Nd')
        cmd.color('grey85', 'elem Ne')
        cmd.color('grey43', 'elem Np')
        cmd.color('grey67', 'elem Ni')
        cmd.color('grey69', 'elem Nb')
        cmd.color('grey25', 'elem N')
        cmd.color('grey23', 'elem No')
        cmd.color('grey36', 'elem Os')
        cmd.color('grey44', 'elem O')
        cmd.color('grey33', 'elem Pd')
        cmd.color('grey57', 'elem P')
        cmd.color('grey82', 'elem Pt')
        cmd.color('grey37', 'elem Pu')
        cmd.color('grey40', 'elem Po')
        cmd.color('grey35', 'elem K')
        cmd.color('grey95', 'elem Pr')
        cmd.color('grey90', 'elem Pm')
        cmd.color('grey52', 'elem Pa')
        cmd.color('grey35', 'elem Ra')
        cmd.color('grey46', 'elem Rn')
        cmd.color('grey43', 'elem Re')
        cmd.color('grey39', 'elem Rh')
        cmd.color('grey27', 'elem Rb')
        cmd.color('grey47', 'elem Ru')
        cmd.color('grey19', 'elem Rf')
        cmd.color('grey89', 'elem Sm')
        cmd.color('grey90', 'elem Sc')
        cmd.color('grey20', 'elem Sg')
        cmd.color('grey66', 'elem Se')
        cmd.color('grey80', 'elem Si')
        cmd.color('grey75', 'elem Ag')
        cmd.color('grey46', 'elem Na')
        cmd.color('grey71', 'elem Sr')
        cmd.color('grey76', 'elem S')
        cmd.color('grey60', 'elem Ta')
        cmd.color('grey53', 'elem Tc')
        cmd.color('grey51', 'elem Te')
        cmd.color('grey81', 'elem Tb')
        cmd.color('grey39', 'elem Tl')
        cmd.color('grey59', 'elem Th')
        cmd.color('grey61', 'elem Tm')
        cmd.color('grey48', 'elem Sn')
        cmd.color('grey75', 'elem Ti')
        cmd.color('grey50', 'elem W')
        cmd.color('grey47', 'elem U')
        cmd.color('grey65', 'elem V')
        cmd.color('grey54', 'elem Xe')
        cmd.color('grey55', 'elem Yb')
        cmd.color('grey91', 'elem Y')
        cmd.color('grey51', 'elem Zn')
        cmd.color('grey81', 'elem Zr')
    cmd.extend('grayscale',grayscale)
    python end

snippet yrb
abbr    yrb
alias   yrb
    cmd.do('yrb')

snippet timcolor
abbr    timcolor
alias   timcolor
    cmd.do('timcolor')

snippet colorh1
abbr    colorh1
alias   colorh1
    cmd.do('colorh1')

snippet colorh2
abbr    colorh2
alias   colorh2
    cmd.do('colorh2')

snippet cav
abbr    cav
alias   cav
    cmd.do('cav')

snippet PE125
abbr    PE125
alias   PE125
    cmd.do('PE125')

snippet PE25
abbr    PE25
alias   PE25
    cmd.do('PE25')

snippet PE50
abbr    PE50
alias   PE50
    cmd.do('PE50')

snippet PE75
abbr    PE75
alias   PE75
    cmd.do('PE75')

snippet PE85
abbr    PE85
alias   PE85
    cmd.do('PE85')

snippet PE66
abbr    PE66
alias   PE66
    cmd.do('PE66')

snippet PE33
abbr    PE33
alias   PE33
    cmd.do('PE33')

snippet cntccp4emaps
abbr    cntccp4emaps
alias   cntccp4emaps
    print("Count the number of ccp4 electron density files in current directory.");
    print("Usage: cntccp4s");
    myPath = os.getcwd();
    ccp4Counter = len(glob.glob1(myPath,"*.pse"));
    print("Number of number of ccp4 electron density files in the current directory: ", ccp4Counter);

snippet cntfiles
abbr    cntfiles
alias   cntfiles
    print("Count the files in the directory.")
    print("Usage: cntfiles.")
    # simple version for working with CWD
    print("Number of files in current working directory: ", len([name for name in os.listdir('.') if os.path.isfile(name)]))

snippet cntlogs
abbr    cntlogs
alias   cntlogs
    print("Count the number of log image files in current directory.");
    print("Usage: cntlogs");
    myPath = os.getcwd();
    logCounter = len(glob.glob1(myPath,"*.log"));
    print("Number of number of log image files in the current directory: ", logCounter);

snippet cntmtzs
abbr    cntmtzs
alias   cntmtzs
    print("Count the number of mtz structure factor files in current directory.");
    print("Usage: cntmtzs");
    myPath = os.getcwd();
    mtzCounter = len(glob.glob1(myPath,"*.mtz"));
    print("Number of number of mtz structure factor  files in the current directory: ", mtzCounter);

snippet cntpdbs
abbr    cntpdbs
alias   cntpdbs
    print("Count the number of pdb files in the current directory.")
    print("Usage: cntpdb")
    myPath = os.getcwd()
    pdbCounter = len(glob.glob1(myPath,"*.pdb"))
    print("Number of pdb files in the current directory: ", pdbCounter)

snippet cntpmls
abbr    cntpmls
alias   cntpmls
    print("Count the number of pml (Pymol macro language) files in current directory.");
    print("Usage: cntpmls");
    myPath = os.getcwd();
    pmlCounter = len(glob.glob1(myPath,"*.pml"));
    print("Number of pml files in the current directory: ", pmlCounter);

snippet cntpngs
abbr    cntpngs
alias   cntpngs
    print("Count the number of png image files in current directory.");
    print("Usage: cntpngs");
    myPath = os.getcwd();
    pngCounter = len(glob.glob1(myPath,"*.png"));
    print("Number of number of png image files in the current directory: ", pngCounter);

snippet cntpses
abbr    cntpses
alias   cntpses
    print("Count the number of *.pse (session) files in current directory.");
    print("Usage: cntpses");
    myPath = os.getcwd();
    pseCounter = len(glob.glob1(myPath,"*.pse"));
    print("Number of *.pse (session) files in the current directory: ", pseCounter);

snippet rmhb
abbr    rmhb
alias   rmhb
    cmd.delete('hbonds')

snippet hb
abbr    hb
alias   hb
    cmd.distance("hbonds", "all", "all", "3.2", mode="2")
    cmd.set("dash_gap","0.4")
    cmd.set("dash_color","grey30")
    cmd.set("dash_width","1.5")
    cmd.set("dash_length",".25")
    print("Enter 'rmhb' to remove the hbonds.")

snippet rmd
abbr    rmd
alias   rmd
    cmd.do('delete measure*')
    cmd.do('delete m*_*')
    cmd.do('delete dist*')

snippet nmr
abbr    nmr
alias   nmr
    set all_states, on

snippet nmroff
abbr    nmroff
alias   nmroff
    set all_states, off

snippet nmroffpy
abbr    nmroffpy
alias   nmroffpy
    cmd.do('set all_states, off')

snippet nmrpy
abbr    nmrpy
alias   nmrpy
    cmd.do('set all_states, on')

snippet loadAndAlignManyFiles1
abbr    loadAndAlignManyFiles1
alias   loadAndAlignManyFiles1
    # To load a bunch of related files from inside PyMOL all at once;
    run ${1:~/Scripts/}loadFiles.py;
    loadFiles ${2:refine_*}.pdb;

snippet loadAndAlignManyFiles2
abbr    loadAndAlignManyFiles2
alias   loadAndAlignManyFiles2
    # To align all of the loaded RNA structures in all possible combinations by their C1' carbon atoms;
    #  Yes, this construct is a list comprehension inside a list comprehension!;
    run ${1:~/Scripts/}optAlignRNA.py;
    [[optAlignRNA(x, y) for x in cmd.get_names()] for y in cmd.get_names()];

snippet optAlignRNA
abbr    optAlignRNA
alias   optAlignRNA
    python
     ##############################################################################
    #
    # @SUMMARY: -- QKabsch.py.  A python implementation of the optimal superposition
    #     of two sets of vectors as proposed by Kabsch 1976 & 1978.
    #
    # @AUTHOR: Jason Vertrees
    # @COPYRIGHT: Jason Vertrees (C), 2005-2007
    # @LICENSE: Released under GPL:
    # This program is free software; you can redistribute it and/or modify
    #    it under the terms of the GNU General Public License as published by
    #    the Free Software Foundation; either version 2 of the License, or
    #    (at your option) any later version.
    # This program is distributed in the hope that it will be useful, but WITHOUT
    # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    # FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License along with
    # this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
    # Street, Fifth Floor, Boston, MA 02110-1301, USA 
    #
    # DATE  : 2007-01-01
    # REV   : 2
    # REQUIREMENTS: numpy
    #
    #
    # Modified optAlign.py to use C1' carbon atoms of RNA for alignment.
    # Jan. 29, 2020 
    # Blaine Mooers, PhD
    # Univ. of Oklahoma Health Sciences Center
    #
    #############################################################################
    from array import *
     
    # system stuff
    import os
    import copy
     
    # pretty printing
    import pprint
     
    # for importing as a plugin into PyMol
    from pymol import cmd
    from pymol import stored
    from pymol import selector
     
    # using numpy for linear algebra
    import numpy
     
    def optAlignRNA( sel1, sel2 ):
    	"""
    	optAlignRNA performs the Kabsch alignment algorithm upon the C1' carbons of two selections.
    	Example: optAlignRNA 1JU7 and i. 1-16 and n. C1', 1CLL and i. 4-146 and n. C1'
     
    	Two RMSDs are returned.  One comes from the Kabsch algorithm and the other from
    	PyMOL based upon your selections.
    	
    	This function can be run in a for loop to fit multiple structures  with a common prefix name:
    	
    	for x in cmd.get_names(): optAlignRNA(x, "1JU7_0001")
    	 
    	or get the rmsds for all combinations, do the following:
    	 
    	[[optAlignRNA(x, y) for x in cmd.get_names()] for y in cmd.get_names()]
    
    	"""
    	cmd.reset()
     
    	# make the lists for holding coordinates
    	# partial lists
    	stored.sel1 = []
    	stored.sel2 = []
    	# full lists
    	stored.mol1 = []
    	stored.mol2 = []
     
    	# -- CUT HERE
    	sel1 += " and N. C1'"
    	sel2 += " and N. C1'"
    	# -- CUT HERE
     
    	# Get the selected coordinates.  We
    	# align these coords.
    	cmd.iterate_state(1, selector.process(sel1), "stored.sel1.append([x,y,z])")
    	cmd.iterate_state(1, selector.process(sel2), "stored.sel2.append([x,y,z])")
     
    	# get molecule name
    	mol1 = cmd.identify(sel1,1)[0][0]
    	mol2 = cmd.identify(sel2,1)[0][0]
     
    	# Get all molecule coords.  We do this because
    	# we have to rotate the whole molcule, not just
    	# the aligned selection
    	cmd.iterate_state(1, mol1, "stored.mol1.append([x,y,z])")
    	cmd.iterate_state(1, mol2, "stored.mol2.append([x,y,z])")
     
    	# check for consistency
    	assert len(stored.sel1) == len(stored.sel2)
    	L = len(stored.sel1)
    	assert L > 0
     
    	# must alway center the two proteins to avoid
    	# affine transformations.  Center the two proteins
    	# to their selections.
    	COM1 = numpy.sum(stored.sel1,axis=0) / float(L)
    	COM2 = numpy.sum(stored.sel2,axis=0) / float(L)
    	stored.sel1 -= COM1
    	stored.sel2 -= COM2
     
    	# Initial residual, see Kabsch.
    	E0 = numpy.sum( numpy.sum(stored.sel1 * stored.sel1,axis=0),axis=0) + numpy.sum( numpy.sum(stored.sel2 * stored.sel2,axis=0),axis=0)
     
    	#
    	# This beautiful step provides the answer.  V and Wt are the orthonormal
    	# bases that when multiplied by each other give us the rotation matrix, U.
    	# S, (Sigma, from SVD) provides us with the error!  Isn't SVD great!
    	V, S, Wt = numpy.linalg.svd( numpy.dot( numpy.transpose(stored.sel2), stored.sel1))
     
    	# we already have our solution, in the results from SVD.
    	# we just need to check for reflections and then produce
    	# the rotation.  V and Wt are orthonormal, so their det's
    	# are +/-1.
    	reflect = float(str(float(numpy.linalg.det(V) * numpy.linalg.det(Wt))))
     
    	if reflect == -1.0:
    		S[-1] = -S[-1]
    		V[:,-1] = -V[:,-1]
     
    	RMSD = E0 - (2.0 * sum(S))
    	RMSD = numpy.sqrt(abs(RMSD / L))
     
    	#U is simply V*Wt
    	U = numpy.dot(V, Wt)
     
    	# rotate and translate the molecule
    	stored.sel2 = numpy.dot((stored.mol2 - COM2), U)
    	stored.sel2 = stored.sel2.tolist()
    	# center the molecule
    	stored.sel1 = stored.mol1 - COM1
    	stored.sel1 = stored.sel1.tolist()
     
    	# let PyMol know about the changes to the coordinates
    	cmd.alter_state(1,mol1,"(x,y,z)=stored.sel1.pop(0)")
    	cmd.alter_state(1,mol2,"(x,y,z)=stored.sel2.pop(0)")
     
    	#print("Moved: %s Reference: %s RMSD = %f" % mol1, mol2, RMSD)
    	print("% s, % s,% 5.3f" % (mol1, mol2, RMSD))
     
    	# make the alignment OBVIOUS
    	cmd.hide('everything')
    	cmd.show('ribbon', sel1 + ' or ' + sel2)
    	cmd.color('gray70', mol1 )
    	cmd.color('magenta', mol2 )
    	cmd.color('red', 'visible')
    	cmd.show('ribbon', 'not visible')
    	cmd.center('visible')
    	cmd.orient()
    	cmd.zoom('visible')
     
    cmd.extend("optAlignRNA", optAlignRNA)
    python end

snippet ao
abbr    ao
alias   ao
    set_color oxygen, [1.0,0.4,0.4];
    set_color nitrogen, [0.5,0.5,1.0];
    remove solvent;
    as spheres;
    util.cbaw;
    bg white;
    set light_count,10;
    set spec_count,1;
    set shininess, 10;
    set specular,0.25;
    set ambient,0;
    set direct,0;
    set reflect,1.5;
    set ray_shadow_decay_factor, 0.1;
    set ray_shadow_decay_range, 2;
    set depth_cue, 0;
    ray;

snippet bsfr
abbr    bsfr
alias   bsfr
    # Edit the selection that is named ligand here.;
    create ligand, ${1:/bluComplex/C/A/1101};
    preset.ball_and_stick(selection='ligand');
    util.cbaw ligand;
    set stick_color, white, ligand;
    set valence, off, ligand;
    unset valence;
    # above command is required after using preset;
    set sphere_color, black, elem C and ligand;
    set sphere_color, red, elem O and ligand;
    set sphere_color, blue, elem N and ligand;
    set sphere_color, lightblue, elem F and ligand;
    set stick_radius, 0.12;
    set sphere_quality, 4;
    set cartoon_ring_finder, 4, ligand;
    set cartoon_ring_mode, 3, ligand;
    set cartoon_ring_width, 0.12, ligand;
    set cartoon_ring_transparency, .0, ligand;
    show cartoon, ligand;

snippet wallart
abbr    wallart
alias   wallart
    # Reset hash_max from 100 to 2000 to enable the saving of images of large size for office wall hangings, eg. 30 x 30 inches. 
    hash_max=2000

snippet wallartpy
abbr    wallartpy
alias   wallartpy
    # Reset hash_max from 100 to 2000 to enable the saving of images of large size for office wall hangings, eg. 30 x 30 inches.;
    cmd.do("hash_max=2000");

snippet cblindCartoon
abbr    cblindCartoon
alias   cblindCartoon
    # CB is a shortcut or funtion in the pymolshortcut.py file.
    # Load this function by entering 'run pymolshortcuts.py' first.
    CB;
    color cb_lightblue, ss h;
    color cb_vermillion, ss s;
    color lightorange, ss l+'';

